<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Hack Engineering</title>
    <link>https://chaingng.github.io/tags/python/</link>
    <description>Recent content in Python on Hack Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 26 Aug 2020 10:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://chaingng.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[python] ファイルの読み書きまとめ</title>
      <link>https://chaingng.github.io/post/python_file/</link>
      <pubDate>Wed, 26 Aug 2020 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_file/</guid>
      <description>目次 ファイルの書き込み ファイルの読み込み ファイルのデフォルト読み込み ファイルの追加書き込み ファイルを１行ずつ読み込み ファイルをリストとして読</description>
    </item>
    
    <item>
      <title>[python] listをタブ区切り/スペース区切りで表示させる</title>
      <link>https://chaingng.github.io/post/python_list_tab/</link>
      <pubDate>Tue, 25 Aug 2020 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_list_tab/</guid>
      <description>タブ区切りで表示 &amp;gt;&amp;gt;&amp;gt; l = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;] &amp;gt;&amp;gt;&amp;gt; print(&#39;\t&#39;.join([str(i) for i in l])) a b c d e スペース区切りで表示 &amp;gt;&amp;gt;&amp;gt; l = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;] &amp;gt;&amp;gt;&amp;gt; print(&#39; &#39;.join([str(i) for i in l])) a b c d e コンマ区切りで表示 &amp;gt;&amp;gt;&amp;gt; l = [&#39;a&#39;,</description>
    </item>
    
    <item>
      <title>[python] 現在時刻を扱う</title>
      <link>https://chaingng.github.io/post/python_datetime/</link>
      <pubDate>Wed, 05 Aug 2020 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_datetime/</guid>
      <description>Pythonの標準モジュールdatetimeを使うと、日付や時間を操作できるようになる。 現在の時刻を取得 &amp;gt;&amp;gt;&amp;gt; from datetime import datetime &amp;gt;&amp;gt;&amp;gt; datetime.now() datetime.datetime(2020, 8, 25, 14, 4, 6, 131518) 文字列を</description>
    </item>
    
    <item>
      <title>[python] dot-envの使い方</title>
      <link>https://chaingng.github.io/post/python_dotenv/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_dotenv/</guid>
      <description>python-dotenvを使うことで、.envファイルを使って環境変数を扱うことができる。 これだけの手順でよい。 python-dotenv</description>
    </item>
    
    <item>
      <title>[python] classの使い方</title>
      <link>https://chaingng.github.io/post/python-class/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python-class/</guid>
      <description>classについて、たくさんあるが最小限の使い方についてメモ。 使い方 __init__でインスタンス作成時のオペレーションを定義する インスタン</description>
    </item>
    
    <item>
      <title>[python] pipの使い方まとめ</title>
      <link>https://chaingng.github.io/post/python_pip/</link>
      <pubDate>Mon, 01 Jun 2020 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_pip/</guid>
      <description>目次 pipのインストール パッケージのインストール バージョンを指定してパッケージのインストール インストール済みのパッケージ一覧の確認 パッケージ</description>
    </item>
    
    <item>
      <title>[python] トライ木の実装</title>
      <link>https://chaingng.github.io/post/tri_code/</link>
      <pubDate>Fri, 23 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/tri_code/</guid>
      <description>import collections class TriNode(object): def __init__(self): self.children = collections.defaultdict(TriNode) self.is_word = False class TriTree: def __init__(self): self.root = TriNode() def insert(self, word): current = self.root for letter in word: current = current.children[letter] current.is_word = True def search(self, word): current = self.root for letter in word: current = current.children[letter] if current is None: return False return current.is_word def startswith(self, prefix): current = self.root for letter in prefix: current = current.children[letter] if</description>
    </item>
    
    <item>
      <title>[python] 優先度付きキューの実装</title>
      <link>https://chaingng.github.io/post/priority_queue/</link>
      <pubDate>Fri, 16 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/priority_queue/</guid>
      <description>import sys class PriorityQueueNode(object): def __init__(self, obj, key): self.obj = obj self.key = key def __repr__(self): return str(self.obj) + &#39;: &#39; + str(self.key) class PriorityQueue(object): def __init__(self): self.array = [] # 要素を追加 def insert(self, node): self.array.append(node) return self.array[-1] # 最も高い優先度のnodeを取り出し def extract_min(self): if self.array is None: return None minimum =</description>
    </item>
    
    <item>
      <title>[python] ハッシュテーブルの実装</title>
      <link>https://chaingng.github.io/post/python_hash_code/</link>
      <pubDate>Fri, 09 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_hash_code/</guid>
      <description>class Item(object): def __init__(self, key, value): self.key = key self.value = value class HashTable(object): def __init__(self, size=10): self.size = size self.array = [[] for _ in range(self.size)] def _hash_function(self, key): return key % self.size def set(self, key, value): hash_index = self._hash_function(key) for node in self.array[hash_index]: if node.key == key: node.value = value return self.array[hash_index].append(Item(key, value)) def get(self, key): hash_index = self._hash_function(key) for node in self.array[hash_index]: if node.key == key: return</description>
    </item>
    
    <item>
      <title>[python] ヒープの実装</title>
      <link>https://chaingng.github.io/post/heap_code/</link>
      <pubDate>Fri, 02 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/heap_code/</guid>
      <description>class MinHeap(object): def __init__(self): self.array = [] def __len__(self): return len(self.array) def extract_min(self): if not self.array: return None if len(self.array) == 1: return self.array.pop(0) minimum = self.array[0] self.array[0] = self.array.pop(-1) self._bubble_down(index=0) return minimum def peek_min(self): return self.array[0] if self.array else None def insert(self, key): if key is None: raise TypeError(&#39;key cannot be none&#39;) self.array.append(key) self._bubble_up(index=len(self.array) - 1) def _bubble_down(self, index): min_child_index = self._find_smaller_child(index) if min_child_index == -1: return if self.array[index]</description>
    </item>
    
    <item>
      <title>[python] キューの実装</title>
      <link>https://chaingng.github.io/post/queue_code/</link>
      <pubDate>Fri, 23 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/queue_code/</guid>
      <description>scratch # queueのベースクラスを作成 # isEmpty, lenメソッド, 全nodeの一覧を持つ class AbstractQueue: def __init__(self): self.top = 0 def isEmpty(self): return self.top == 0 def __len__(self): return self.top def __str__(self): result = &#39;------\n&#39; for element in self: result += str(element) + &#39;\n&#39; return</description>
    </item>
    
    <item>
      <title>[python] スタックの実装</title>
      <link>https://chaingng.github.io/post/stack_code/</link>
      <pubDate>Fri, 23 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/stack_code/</guid>
      <description>scratch class AbstructStack: def __init__(self): self.top = 0 def isEmpty(self): return self.top == 0 def __len__(self): return self.top def __str__(self): result = &#39;------\n&#39; for element in self: result += str(element) + &#39;\n&#39; return result[:-1] + &#39;\n------&#39; class StackNode(object): def __init__(self, value): self.value = value self.next = None class LinkedListStack(AbstructStack): def __init__(self): AbstructStack.__init__(self) self.front = 0 def dequeue(self): if self.isEmpty(): raise IndexError(&#39;stack is empty&#39;) value = self.front.value self.front = self.front.next self.top</description>
    </item>
    
    <item>
      <title>[python] クイックソートの実装</title>
      <link>https://chaingng.github.io/post/quick_sort_code/</link>
      <pubDate>Fri, 16 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/quick_sort_code/</guid>
      <description># https://ja.wikipedia.org/wiki/%E3%82%AF%E3%82%A4%E3%83%83%E3%82%AF%E3%82%BD%E3%83%BC%E3%83%88 # http://www.ics.kagoshima-u.ac.jp/~fuchida/edu/algorithm/sort-algorithm/quick-sort.html def quick_sort(array, first, last): # あるpivotをもとに、そこから左だけはpivot以下の値だけに、右はpivot以上の値だけにする # 左と右の配列に対してq</description>
    </item>
    
    <item>
      <title>[python] バブルソートの実装</title>
      <link>https://chaingng.github.io/post/bubble_sort_code/</link>
      <pubDate>Mon, 12 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/bubble_sort_code/</guid>
      <description># https://ja.wikipedia.org/wiki/%E3%83%90%E3%83%96%E3%83%AB%E3%82%BD%E3%83%BC%E3%83%88 # 交換を最大 n-1 , n-2, ... 1回 = n(n-1)/2 回 -&amp;gt; O(n^2) def bubble_sort(array): # 最初は0からn-1まで探索し一番大きい要素をn-1に # 次は0からn-2まで一番大きい要素をn-2</description>
    </item>
    
    <item>
      <title>[python] マージソートの実装</title>
      <link>https://chaingng.github.io/post/merge_sort_code/</link>
      <pubDate>Fri, 09 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/merge_sort_code/</guid>
      <description># https://ja.wikipedia.org/wiki/%E3%83%9E%E3%83%BC%E3%82%B8%E3%82%BD%E3%83%BC%E3%83%88 # http://www.ics.kagoshima-u.ac.jp/~fuchida/edu/algorithm/sort-algorithm/merge-sort.html def merge_sort(array): # 配列の長さが１ならソート不要なので返す if len(array) &amp;lt;= 1: return array # それより長いなら半分に分割してそれぞれにマージソートを適用する mid = len(array) // 2 left</description>
    </item>
    
    <item>
      <title>pythonの比較におけるisと==の違い</title>
      <link>https://chaingng.github.io/post/python_is/</link>
      <pubDate>Tue, 30 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_is/</guid>
      <description>referenceによると、以下の通り。 ==とis ==はオブジェクトの値が同一か比較する。基本はこちらを使う。 isは同じオブジェクトがどうか</description>
    </item>
    
    <item>
      <title>[python] __repr__と__str__の違い</title>
      <link>https://chaingng.github.io/post/python_repr/</link>
      <pubDate>Mon, 22 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_repr/</guid>
      <description>Referenceによると以下の通り。 __str__(self) オブジェクトの「非公式の (informal)」あるいは表示に適した文字列表現を計算するために呼ばれる</description>
    </item>
    
    <item>
      <title>[python] データ型ごとのメモリサイズ</title>
      <link>https://chaingng.github.io/post/python_type_bits/</link>
      <pubDate>Mon, 15 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_type_bits/</guid>
      <description>int intはデフォルトで28bit &amp;gt;&amp;gt;&amp;gt; import sys &amp;gt;&amp;gt;&amp;gt; sys.getsizeof(1) 28 超えると自動で拡張される &amp;gt;&amp;gt;&amp;gt; sys.getsizeof(1&amp;lt;&amp;lt;32) 32 &amp;gt;&amp;gt;&amp;gt; sys.getsizeof(1&amp;lt;&amp;lt;60) 36 &amp;gt;&amp;gt;&amp;gt; sys.getsizeof(1 &amp;lt;&amp;lt; 10000) 1360 Python3.0をみると、整数型の上限が廃止され</description>
    </item>
    
    <item>
      <title>[flask] Blueprintを用いたアプリケーションの分割とベストプラクティス</title>
      <link>https://chaingng.github.io/post/flask_blueprint/</link>
      <pubDate>Mon, 08 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/flask_blueprint/</guid>
      <description>Blueprintとは Blueprintとは、アプリケーションを分割するための機能です。 Blueprintを使うことで、関連するビューやコー</description>
    </item>
    
    <item>
      <title>[python] python2ではtimestamp()が使えないのでdatetimeに変換して日付を比較する</title>
      <link>https://chaingng.github.io/post/python_timestamp/</link>
      <pubDate>Tue, 02 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_timestamp/</guid>
      <description>python3ではdatetimeをタイム・スタンプに変換するtimestamp()が使えるが、python2では存在しない。 そこで、日付の</description>
    </item>
    
    <item>
      <title>[python] ユーザ用にランダムな英数字パスワードを生成する</title>
      <link>https://chaingng.github.io/post/python_random_user_password/</link>
      <pubDate>Mon, 01 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_random_user_password/</guid>
      <description>英数字8文字のランダムパスワードを生成 &amp;gt;&amp;gt;&amp;gt; import random, string &amp;gt;&amp;gt;&amp;gt; &#39;&#39;.join([random.choice(string.ascii_letters + string.digits) for i in range(8)]) &#39;8GkJXlpr&#39; 数字だけの場合はstring.digitsのみにし、長さを変更したい場合は8</description>
    </item>
    
    <item>
      <title>[python] string文字列の使い方</title>
      <link>https://chaingng.github.io/post/python_string/</link>
      <pubDate>Sun, 30 Apr 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_string/</guid>
      <description>連続して並んでいる文字を連結する &amp;gt;&amp;gt;&amp;gt; &#39;Py&#39; &#39;thon&#39; &#39;Python&#39; 負のindexを指定 &amp;gt;&amp;gt;&amp;gt; word = &#39;Python&#39; &amp;gt;&amp;gt;&amp;gt; word[-1] # last character &#39;n&#39; &amp;gt;&amp;gt;&amp;gt; word[-2] # second-last character &#39;o&#39; &amp;gt;&amp;gt;&amp;gt; word[-6] &#39;P&#39; スライス &amp;gt;&amp;gt;&amp;gt; word[:2] # character from the beginning to position 2 (excluded) &#39;Py&#39; &amp;gt;&amp;gt;&amp;gt; word[4:] # characters from</description>
    </item>
    
    <item>
      <title>pipenvの使い方</title>
      <link>https://chaingng.github.io/post/pipenv/</link>
      <pubDate>Sun, 23 Apr 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/pipenv/</guid>
      <description>pipenvを使うことにより、rubyにおけるGemfileのようにpythonでpackage管理を行うことができる。 目次 利点 特徴 インスト</description>
    </item>
    
    <item>
      <title>[要約]A Better Pip Workflow</title>
      <link>https://chaingng.github.io/post/a_better_pip_workflow/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/a_better_pip_workflow/</guid>
      <description>requirements.txtを使うのには問題があるよ、という話。 典型的なrequirements.txtの使い方 １．A list of top-level dependencies a project has, often without</description>
    </item>
    
  </channel>
</rss>