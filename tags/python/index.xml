<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Hack Engineering</title>
    <link>https://chaingng.github.io/tags/python/</link>
    <description>Recent content in Python on Hack Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://chaingng.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python dot-envの使い方</title>
      <link>https://chaingng.github.io/post/python_dotenv/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_dotenv/</guid>
      <description>python-dotenvを使うことで、.envファイルを使って環境変数を扱うことができる。 これだけの手順でよい。 python-dotenv</description>
    </item>
    
    <item>
      <title>Python classの使い方</title>
      <link>https://chaingng.github.io/post/python-class/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python-class/</guid>
      <description>classについて、たくさんあるが最小限の使い方についてメモ。 使い方 __init__でインスタンス作成時のオペレーションを定義する インスタン</description>
    </item>
    
    <item>
      <title>Pythonでのトライ木の実装</title>
      <link>https://chaingng.github.io/post/tri_code/</link>
      <pubDate>Fri, 23 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/tri_code/</guid>
      <description>import collections class TriNode(object): def __init__(self): self.children = collections.defaultdict(TriNode) self.is_word = False class TriTree: def __init__(self): self.root = TriNode() def insert(self, word): current = self.root for letter in word: current = current.children[letter] current.is_word = True def search(self, word): current = self.root for letter in word: current = current.children[letter] if current is None: return False return current.is_word def startswith(self, prefix): current = self.root for letter in prefix: current = current.children[letter] if</description>
    </item>
    
    <item>
      <title>Pythonでの優先度付きキューの実装</title>
      <link>https://chaingng.github.io/post/priority_queue/</link>
      <pubDate>Fri, 16 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/priority_queue/</guid>
      <description>import sys class PriorityQueueNode(object): def __init__(self, obj, key): self.obj = obj self.key = key def __repr__(self): return str(self.obj) + &#39;: &#39; + str(self.key) class PriorityQueue(object): def __init__(self): self.array = [] # 要素を追加 def insert(self, node): self.array.append(node) return self.array[-1] # 最も高い優先度のnodeを取り出し def extract_min(self): if self.array is None: return None minimum =</description>
    </item>
    
    <item>
      <title>pythonの比較におけるisと==の違い</title>
      <link>https://chaingng.github.io/post/python_is/</link>
      <pubDate>Tue, 30 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_is/</guid>
      <description>referenceによると、以下の通り。 ==とis ==はオブジェクトの値が同一か比較する。基本はこちらを使う。 isは同じオブジェクトがどうか</description>
    </item>
    
    <item>
      <title>[python]__repr__と__str__の違い</title>
      <link>https://chaingng.github.io/post/python_repr/</link>
      <pubDate>Mon, 22 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_repr/</guid>
      <description>Referenceによると以下の通り。 __str__(self) オブジェクトの「非公式の (informal)」あるいは表示に適した文字列表現を計算するために呼ばれる</description>
    </item>
    
    <item>
      <title>pythonデータ型ごとのメモリサイズ</title>
      <link>https://chaingng.github.io/post/python_type_bits/</link>
      <pubDate>Mon, 15 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_type_bits/</guid>
      <description>int intはデフォルトで28bit &amp;gt;&amp;gt;&amp;gt; import sys &amp;gt;&amp;gt;&amp;gt; sys.getsizeof(1) 28 超えると自動で拡張される &amp;gt;&amp;gt;&amp;gt; sys.getsizeof(1&amp;lt;&amp;lt;32) 32 &amp;gt;&amp;gt;&amp;gt; sys.getsizeof(1&amp;lt;&amp;lt;60) 36 &amp;gt;&amp;gt;&amp;gt; sys.getsizeof(1 &amp;lt;&amp;lt; 10000) 1360 Python3.0をみると、整数型の上限が廃止され</description>
    </item>
    
    <item>
      <title>python2ではtimestamp()が使えないのでdatetimeに変換して日付を比較する</title>
      <link>https://chaingng.github.io/post/python_timestamp/</link>
      <pubDate>Tue, 02 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_timestamp/</guid>
      <description>python3ではdatetimeをタイム・スタンプに変換するtimestamp()が使えるが、python2では存在しない。 そこで、日付の</description>
    </item>
    
    <item>
      <title>pythonでユーザ用にランダムな英数字パスワードを生成する</title>
      <link>https://chaingng.github.io/post/python_random_user_password/</link>
      <pubDate>Mon, 01 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_random_user_password/</guid>
      <description>英数字8文字のランダムパスワードを生成 &amp;gt;&amp;gt;&amp;gt; import random, string &amp;gt;&amp;gt;&amp;gt; &#39;&#39;.join([random.choice(string.ascii_letters + string.digits) for i in range(8)]) &#39;8GkJXlpr&#39; 数字だけの場合はstring.digitsのみにし、長さを変更したい場合は8</description>
    </item>
    
    <item>
      <title>python string文字列の使い方</title>
      <link>https://chaingng.github.io/post/python_string/</link>
      <pubDate>Sun, 30 Apr 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_string/</guid>
      <description>連続して並んでいる文字を連結する &amp;gt;&amp;gt;&amp;gt; &#39;Py&#39; &#39;thon&#39; &#39;Python&#39; 負のindexを指定 &amp;gt;&amp;gt;&amp;gt; word = &#39;Python&#39; &amp;gt;&amp;gt;&amp;gt; word[-1] # last character &#39;n&#39; &amp;gt;&amp;gt;&amp;gt; word[-2] # second-last character &#39;o&#39; &amp;gt;&amp;gt;&amp;gt; word[-6] &#39;P&#39; スライス &amp;gt;&amp;gt;&amp;gt; word[:2] # character from the beginning to position 2 (excluded) &#39;Py&#39; &amp;gt;&amp;gt;&amp;gt; word[4:] # characters from</description>
    </item>
    
    <item>
      <title>pipenvの使い方</title>
      <link>https://chaingng.github.io/post/pipenv/</link>
      <pubDate>Sun, 23 Apr 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/pipenv/</guid>
      <description>pipenvを使うことにより、rubyにおけるGemfileのようにpythonでpackage管理を行うことができる。 目次 利点 特徴 インスト</description>
    </item>
    
    <item>
      <title>[要約]A Better Pip Workflow</title>
      <link>https://chaingng.github.io/post/a_better_pip_workflow/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/a_better_pip_workflow/</guid>
      <description>requirements.txtを使うのには問題があるよ、という話。 典型的なrequirements.txtの使い方 １．A list of top-level dependencies a project has, often without</description>
    </item>
    
  </channel>
</rss>