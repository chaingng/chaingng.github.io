<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on Hack Engineering</title>
    <link>https://chaingng.github.io/tags/algorithm/</link>
    <description>Recent content in Algorithm on Hack Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 23 Mar 2018 10:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://chaingng.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>トライ木の実装</title>
      <link>https://chaingng.github.io/post/tri_code/</link>
      <pubDate>Fri, 23 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/tri_code/</guid>
      <description>import collections class TriNode(object): def __init__(self): self.children = collections.defaultdict(TriNode) self.is_word = False class TriTree: def __init__(self): self.root = TriNode() def insert(self, word): current = self.root for letter in word: current = current.children[letter] current.is_word = True def search(self, word): current = self.root for letter in word: current = current.children[letter] if current is None: return False return current.is_word def startswith(self, prefix): current = self.root for letter in prefix: current = current.children[letter] if current is None: return False return True t = TriTree() t.</description>
    </item>
    
    <item>
      <title>優先度付きキューの実装</title>
      <link>https://chaingng.github.io/post/priority_queue/</link>
      <pubDate>Fri, 16 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/priority_queue/</guid>
      <description>import sys class PriorityQueueNode(object): def __init__(self, obj, key): self.obj = obj self.key = key def __repr__(self): return str(self.obj) + &#39;: &#39; + str(self.key) class PriorityQueue(object): def __init__(self): self.array = [] # 要素を追加 def insert(self, node): self.array.append(node) return self.array[-1] # 最も高い優先度のnodeを取り出し def extract_min(self): if self.array is None: return None minimum =</description>
    </item>
    
    <item>
      <title>ハッシュテーブルの実装</title>
      <link>https://chaingng.github.io/post/hash_code/</link>
      <pubDate>Fri, 09 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/hash_code/</guid>
      <description>class Item(object): def __init__(self, key, value): self.key = key self.value = value class HashTable(object): def __init__(self, size=10): self.size = size self.array = [[] for _ in range(self.size)] def _hash_function(self, key): return key % self.size def set(self, key, value): hash_index = self._hash_function(key) for node in self.array[hash_index]: if node.key == key: node.value = value return self.array[hash_index].append(Item(key, value)) def get(self, key): hash_index = self._hash_function(key) for node in self.array[hash_index]: if node.key == key: return node.</description>
    </item>
    
    <item>
      <title>ヒープの実装</title>
      <link>https://chaingng.github.io/post/heap_code/</link>
      <pubDate>Fri, 02 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/heap_code/</guid>
      <description>class MinHeap(object): def __init__(self): self.array = [] def __len__(self): return len(self.array) def extract_min(self): if not self.array: return None if len(self.array) == 1: return self.array.pop(0) minimum = self.array[0] self.array[0] = self.array.pop(-1) self._bubble_down(index=0) return minimum def peek_min(self): return self.array[0] if self.array else None def insert(self, key): if key is None: raise TypeError(&#39;key cannot be none&#39;) self.array.append(key) self._bubble_up(index=len(self.array) - 1) def _bubble_down(self, index): min_child_index = self._find_smaller_child(index) if min_child_index == -1: return if self.</description>
    </item>
    
    <item>
      <title>キューの実装</title>
      <link>https://chaingng.github.io/post/queue_code/</link>
      <pubDate>Fri, 23 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/queue_code/</guid>
      <description>scratch # queueのベースクラスを作成 # isEmpty, lenメソッド, 全nodeの一覧を持つ class AbstractQueue: def __init__(self): self.top = 0 def isEmpty(self): return self.top == 0 def __len__(self): return self.top def __str__(self): result = &#39;------\n&#39; for element in self: result += str(element) + &#39;\n&#39; return</description>
    </item>
    
    <item>
      <title>スタックの実装</title>
      <link>https://chaingng.github.io/post/stack_code/</link>
      <pubDate>Fri, 23 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/stack_code/</guid>
      <description>scratch  class AbstructStack: def __init__(self): self.top = 0 def isEmpty(self): return self.top == 0 def __len__(self): return self.top def __str__(self): result = &#39;------\n&#39; for element in self: result += str(element) + &#39;\n&#39; return result[:-1] + &#39;\n------&#39; class StackNode(object): def __init__(self, value): self.value = value self.next = None class LinkedListStack(AbstructStack): def __init__(self): AbstructStack.__init__(self) self.front = 0 def dequeue(self): if self.isEmpty(): raise IndexError(&#39;stack is empty&#39;) value = self.front.value self.front = self.</description>
    </item>
    
    <item>
      <title>クイックソートの実装</title>
      <link>https://chaingng.github.io/post/quick_sort_code/</link>
      <pubDate>Fri, 16 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/quick_sort_code/</guid>
      <description># https://ja.wikipedia.org/wiki/%E3%82%AF%E3%82%A4%E3%83%83%E3%82%AF%E3%82%BD%E3%83%BC%E3%83%88 # http://www.ics.kagoshima-u.ac.jp/~fuchida/edu/algorithm/sort-algorithm/quick-sort.html def quick_sort(array, first, last): # あるpivotをもとに、そこから左だけはpivot以下の値だけに、右はpivot以上の値だけにする # 左と右の配列に対してq</description>
    </item>
    
    <item>
      <title>バブルソートの実装</title>
      <link>https://chaingng.github.io/post/bubble_sort_code/</link>
      <pubDate>Mon, 12 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/bubble_sort_code/</guid>
      <description># https://ja.wikipedia.org/wiki/%E3%83%90%E3%83%96%E3%83%AB%E3%82%BD%E3%83%BC%E3%83%88 # 交換を最大 n-1 , n-2, ... 1回 = n(n-1)/2 回 -&amp;gt; O(n^2) def bubble_sort(array): # 最初は0からn-1まで探索し一番大きい要素をn-1に # 次は0からn-2まで一番大きい要素をn-2</description>
    </item>
    
    <item>
      <title>マージソートの実装</title>
      <link>https://chaingng.github.io/post/merge_sort_code/</link>
      <pubDate>Fri, 09 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/merge_sort_code/</guid>
      <description># https://ja.wikipedia.org/wiki/%E3%83%9E%E3%83%BC%E3%82%B8%E3%82%BD%E3%83%BC%E3%83%88 # http://www.ics.kagoshima-u.ac.jp/~fuchida/edu/algorithm/sort-algorithm/merge-sort.html def merge_sort(array): # 配列の長さが１ならソート不要なので返す if len(array) &amp;lt;= 1: return array # それより長いなら半分に分割してそれぞれにマージソートを適用する mid = len(array) // 2 left</description>
    </item>
    
    <item>
      <title>Primitive Typesの基礎</title>
      <link>https://chaingng.github.io/post/primitive_types/</link>
      <pubDate>Mon, 05 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/primitive_types/</guid>
      <description>overview bit操作に慣れ親しんでおく(特にXOR) -16 &amp;gt;&amp;gt; 2 == -4 maskについて理解する 最下位ビットを０にクリアする方法を知る 15 &amp;amp; ~1 brute-for</description>
    </item>
    
    <item>
      <title>5Lと3Lのボトルで4Lの水を計る</title>
      <link>https://chaingng.github.io/post/prime_water/</link>
      <pubDate>Mon, 29 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/prime_water/</guid>
      <description>水の移し方 ３Lの水をくんで、５Lのボトルに移す。 その後５Lのボトルをいっぱいにしても捨てなければいけないので、 常に３Lの水をくんで５Lの水に</description>
    </item>
    
    <item>
      <title>貪欲法の基礎</title>
      <link>https://chaingng.github.io/post/greedy/</link>
      <pubDate>Mon, 29 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/greedy/</guid>
      <description>overview 各ステップにおいて、局所的な最適な決定を繰り返すソリューション 必ずしも最適解を導くわけではない bootcamp 1,5,10,25,50,100セントを使</description>
    </item>
    
    <item>
      <title>再帰の基礎</title>
      <link>https://chaingng.github.io/post/recursion/</link>
      <pubDate>Mon, 22 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/recursion/</guid>
      <description>overview 部分的により小さいソリューションに分解できる問題 検索、列挙、分割統治、複雑な問題の分解は再帰を適用できる可能性がある 再帰関数はベースケース</description>
    </item>
    
    <item>
      <title>動的計画法の基礎</title>
      <link>https://chaingng.github.io/post/dynamic_programming/</link>
      <pubDate>Mon, 22 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/dynamic_programming/</guid>
      <description>overview DPはいつでも解法の１つになりえる 特にサブ問題に関連する問題に適用できる 分割統治との違いは、同じサブ問題が何度も起こり得ること。そのため、</description>
    </item>
    
    <item>
      <title>SQLの基礎</title>
      <link>https://chaingng.github.io/post/sql/</link>
      <pubDate>Mon, 15 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/sql/</guid>
      <description>SQLの実行順序 FROM WHERE GROUP BY HAVING SELECT ORDER_GY DBの作成 CREATE DATABASE shop; テーブルの作成 CREATE TABLE Shohin (shohin_id CHAR(4) NOT NULL, shohin_mei VARCHAR(100) NOT NULL; PRIMARY KEY (shohin_id) ); DEFAULT制約をつければデフォルト値を入れられ</description>
    </item>
    
    <item>
      <title>ソートの基礎</title>
      <link>https://chaingng.github.io/post/sorting/</link>
      <pubDate>Mon, 15 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/sorting/</guid>
      <description>overview ソートは検索を早くするプリプロセスとして使われる 似ているアイテムを探すのにも使われる ヒープソート in-placeだが安定でない spaceO(1) マージソー</description>
    </item>
    
    <item>
      <title>ハッシュテーブルの概要</title>
      <link>https://chaingng.github.io/post/hash/</link>
      <pubDate>Mon, 08 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/hash/</guid>
      <description>overview 挿入、削除、参照がO(1) 衝突に対する実装が必要 linked-listを使うなど 衝突が発生すると、O(1+n/m)に増えていく（m:配列の</description>
    </item>
    
    <item>
      <title>連結リストの概要</title>
      <link>https://chaingng.github.io/post/linked_list/</link>
      <pubDate>Sun, 31 Dec 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/linked_list/</guid>
      <description>概要 片方向リスト、双方向リスト、循環リストがある 挿入と削除がO(1) 検索がO(n) 配列と比較したトレードオフ 追加の場合、配列は限界がありフラ</description>
    </item>
    
    <item>
      <title>連結リストの実装</title>
      <link>https://chaingng.github.io/post/linked_list_code/</link>
      <pubDate>Sun, 24 Dec 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/linked_list_code/</guid>
      <description>class DoublyLinkedListNode(object): def __init__(self, value): self.value = value self.next = None self.prev = None class SinglyLinkedListNode(object): def __init__(self, value): self.value = value self.next = None  </description>
    </item>
    
  </channel>
</rss>