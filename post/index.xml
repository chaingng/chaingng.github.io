<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hack Engineering</title>
    <link>https://chaingng.github.io/post/</link>
    <description>Recent content in Posts on Hack Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://chaingng.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python dot-envの使い方</title>
      <link>https://chaingng.github.io/post/python_dotenv/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_dotenv/</guid>
      <description>python-dotenvを使うことで、.envファイルを使って環境変数を扱うことができる。 これだけの手順でよい。 python-dotenv</description>
    </item>
    
    <item>
      <title>Python classの使い方</title>
      <link>https://chaingng.github.io/post/python-class/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python-class/</guid>
      <description>classについて、たくさんあるが最小限の使い方についてメモ。 使い方 __init__でインスタンス作成時のオペレーションを定義する インスタン</description>
    </item>
    
    <item>
      <title>pipの使い方まとめ</title>
      <link>https://chaingng.github.io/post/python_pip/</link>
      <pubDate>Mon, 01 Jun 2020 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_pip/</guid>
      <description>目次 pipのインストール パッケージのインストール バージョンを指定してパッケージのインストール インストール済みのパッケージ一覧の確認 パッケージ</description>
    </item>
    
    <item>
      <title>sftpでユーザがアクセスできるディレクトリを制限する</title>
      <link>https://chaingng.github.io/post/sftp_chroot/</link>
      <pubDate>Thu, 26 Apr 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/sftp_chroot/</guid>
      <description>sftpでユーザがアクセスできるディレクトリを制限するには、chroot設定を行う。 同時にsftpのみ許可し、sshアクセスできないようにも</description>
    </item>
    
    <item>
      <title>spacemacsでクリップボード共有を行う</title>
      <link>https://chaingng.github.io/post/spacemacs_clipboard/</link>
      <pubDate>Mon, 09 Apr 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/spacemacs_clipboard/</guid>
      <description>spacemacsでコピーしたデータは、デフォルトの設定だとspacemacs外ではペーストできない。 コピーしたデータをクリップボードにも共</description>
    </item>
    
    <item>
      <title>High Sierra以降のmacはftpとtelnetが使えない。使うには、inetutilsをインストールする。</title>
      <link>https://chaingng.github.io/post/mac_ftp/</link>
      <pubDate>Fri, 06 Apr 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/mac_ftp/</guid>
      <description>こちらの公式Q&amp;amp;Aにあるとおり、 High Sierra以降のmacではセキュリティを担保するために、ftpとtelnetがデフォルトで使えな</description>
    </item>
    
    <item>
      <title>特定のs3バケットにのみアクセス権限を与えるiamポリシー</title>
      <link>https://chaingng.github.io/post/aws_s3_iam_policy/</link>
      <pubDate>Mon, 02 Apr 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/aws_s3_iam_policy/</guid>
      <description>公式を参考に、プログラムアクセスか、マネジメントコンソールでのアクセスかに応じて、以下のように設定する。 プログラムアクセスにより、特定のバケ</description>
    </item>
    
    <item>
      <title>Pythonでのトライ木の実装</title>
      <link>https://chaingng.github.io/post/tri_code/</link>
      <pubDate>Fri, 23 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/tri_code/</guid>
      <description>import collections class TriNode(object): def __init__(self): self.children = collections.defaultdict(TriNode) self.is_word = False class TriTree: def __init__(self): self.root = TriNode() def insert(self, word): current = self.root for letter in word: current = current.children[letter] current.is_word = True def search(self, word): current = self.root for letter in word: current = current.children[letter] if current is None: return False return current.is_word def startswith(self, prefix): current = self.root for letter in prefix: current = current.children[letter] if</description>
    </item>
    
    <item>
      <title>Pythonでの優先度付きキューの実装</title>
      <link>https://chaingng.github.io/post/priority_queue/</link>
      <pubDate>Fri, 16 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/priority_queue/</guid>
      <description>import sys class PriorityQueueNode(object): def __init__(self, obj, key): self.obj = obj self.key = key def __repr__(self): return str(self.obj) + &#39;: &#39; + str(self.key) class PriorityQueue(object): def __init__(self): self.array = [] # 要素を追加 def insert(self, node): self.array.append(node) return self.array[-1] # 最も高い優先度のnodeを取り出し def extract_min(self): if self.array is None: return None minimum =</description>
    </item>
    
    <item>
      <title>Pythonでのハッシュテーブルの実装</title>
      <link>https://chaingng.github.io/post/python_hash_code/</link>
      <pubDate>Fri, 09 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_hash_code/</guid>
      <description>class Item(object): def __init__(self, key, value): self.key = key self.value = value class HashTable(object): def __init__(self, size=10): self.size = size self.array = [[] for _ in range(self.size)] def _hash_function(self, key): return key % self.size def set(self, key, value): hash_index = self._hash_function(key) for node in self.array[hash_index]: if node.key == key: node.value = value return self.array[hash_index].append(Item(key, value)) def get(self, key): hash_index = self._hash_function(key) for node in self.array[hash_index]: if node.key == key: return</description>
    </item>
    
    <item>
      <title>Pythonでのヒープの実装</title>
      <link>https://chaingng.github.io/post/heap_code/</link>
      <pubDate>Fri, 02 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/heap_code/</guid>
      <description>class MinHeap(object): def __init__(self): self.array = [] def __len__(self): return len(self.array) def extract_min(self): if not self.array: return None if len(self.array) == 1: return self.array.pop(0) minimum = self.array[0] self.array[0] = self.array.pop(-1) self._bubble_down(index=0) return minimum def peek_min(self): return self.array[0] if self.array else None def insert(self, key): if key is None: raise TypeError(&#39;key cannot be none&#39;) self.array.append(key) self._bubble_up(index=len(self.array) - 1) def _bubble_down(self, index): min_child_index = self._find_smaller_child(index) if min_child_index == -1: return if self.array[index]</description>
    </item>
    
    <item>
      <title>Pythonでのキューの実装</title>
      <link>https://chaingng.github.io/post/queue_code/</link>
      <pubDate>Fri, 23 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/queue_code/</guid>
      <description>scratch # queueのベースクラスを作成 # isEmpty, lenメソッド, 全nodeの一覧を持つ class AbstractQueue: def __init__(self): self.top = 0 def isEmpty(self): return self.top == 0 def __len__(self): return self.top def __str__(self): result = &#39;------\n&#39; for element in self: result += str(element) + &#39;\n&#39; return</description>
    </item>
    
    <item>
      <title>Pythonでのスタックの実装</title>
      <link>https://chaingng.github.io/post/stack_code/</link>
      <pubDate>Fri, 23 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/stack_code/</guid>
      <description>scratch class AbstructStack: def __init__(self): self.top = 0 def isEmpty(self): return self.top == 0 def __len__(self): return self.top def __str__(self): result = &#39;------\n&#39; for element in self: result += str(element) + &#39;\n&#39; return result[:-1] + &#39;\n------&#39; class StackNode(object): def __init__(self, value): self.value = value self.next = None class LinkedListStack(AbstructStack): def __init__(self): AbstructStack.__init__(self) self.front = 0 def dequeue(self): if self.isEmpty(): raise IndexError(&#39;stack is empty&#39;) value = self.front.value self.front = self.front.next self.top</description>
    </item>
    
    <item>
      <title>Pythonでのクイックソートの実装</title>
      <link>https://chaingng.github.io/post/quick_sort_code/</link>
      <pubDate>Fri, 16 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/quick_sort_code/</guid>
      <description># https://ja.wikipedia.org/wiki/%E3%82%AF%E3%82%A4%E3%83%83%E3%82%AF%E3%82%BD%E3%83%BC%E3%83%88 # http://www.ics.kagoshima-u.ac.jp/~fuchida/edu/algorithm/sort-algorithm/quick-sort.html def quick_sort(array, first, last): # あるpivotをもとに、そこから左だけはpivot以下の値だけに、右はpivot以上の値だけにする # 左と右の配列に対してq</description>
    </item>
    
    <item>
      <title>Pythonでのバブルソートの実装</title>
      <link>https://chaingng.github.io/post/bubble_sort_code/</link>
      <pubDate>Mon, 12 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/bubble_sort_code/</guid>
      <description># https://ja.wikipedia.org/wiki/%E3%83%90%E3%83%96%E3%83%AB%E3%82%BD%E3%83%BC%E3%83%88 # 交換を最大 n-1 , n-2, ... 1回 = n(n-1)/2 回 -&amp;gt; O(n^2) def bubble_sort(array): # 最初は0からn-1まで探索し一番大きい要素をn-1に # 次は0からn-2まで一番大きい要素をn-2</description>
    </item>
    
    <item>
      <title>Pythonでのマージソートの実装</title>
      <link>https://chaingng.github.io/post/merge_sort_code/</link>
      <pubDate>Fri, 09 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/merge_sort_code/</guid>
      <description># https://ja.wikipedia.org/wiki/%E3%83%9E%E3%83%BC%E3%82%B8%E3%82%BD%E3%83%BC%E3%83%88 # http://www.ics.kagoshima-u.ac.jp/~fuchida/edu/algorithm/sort-algorithm/merge-sort.html def merge_sort(array): # 配列の長さが１ならソート不要なので返す if len(array) &amp;lt;= 1: return array # それより長いなら半分に分割してそれぞれにマージソートを適用する mid = len(array) // 2 left</description>
    </item>
    
    <item>
      <title>ビット操作の基礎</title>
      <link>https://chaingng.github.io/post/primitive_types/</link>
      <pubDate>Mon, 05 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/primitive_types/</guid>
      <description>overview bit操作に慣れ親しんでおく(特にXOR) -16 &amp;gt;&amp;gt; 2 == -4 maskについて理解する 最下位ビットを０にクリアする方法を知る 15 &amp;amp; ~1 brute-for</description>
    </item>
    
    <item>
      <title>文字コードとは</title>
      <link>https://chaingng.github.io/post/charset/</link>
      <pubDate>Thu, 01 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/charset/</guid>
      <description>文字コード 広義では、文字にバイト表現を割り当て、その対応表を文字コードと呼ぶ 文字集合と符号化方式 文字コードは文字集合(ccs)と符号化方式(</description>
    </item>
    
    <item>
      <title>pythonの比較におけるisと==の違い</title>
      <link>https://chaingng.github.io/post/python_is/</link>
      <pubDate>Tue, 30 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_is/</guid>
      <description>referenceによると、以下の通り。 ==とis ==はオブジェクトの値が同一か比較する。基本はこちらを使う。 isは同じオブジェクトがどうか</description>
    </item>
    
    <item>
      <title>5Lと3Lのボトルで4Lの水を計る</title>
      <link>https://chaingng.github.io/post/prime_water/</link>
      <pubDate>Mon, 29 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/prime_water/</guid>
      <description>水の移し方 ３Lの水をくんで、５Lのボトルに移す。 その後５Lのボトルをいっぱいにしても捨てなければいけないので、 常に３Lの水をくんで５Lの水に</description>
    </item>
    
    <item>
      <title>assetsの読み込み前にDOMの制御をしたい場合はDOMContentLoadedを使う</title>
      <link>https://chaingng.github.io/post/wait_dom_load/</link>
      <pubDate>Mon, 29 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/wait_dom_load/</guid>
      <description>すべてのCSSや画像などのassetsの読み込みまで待つのは時間がかかってしまうので避けたい。 しかしDOMの制御をするためにDOMの読み込み</description>
    </item>
    
    <item>
      <title>貪欲法の基礎</title>
      <link>https://chaingng.github.io/post/greedy/</link>
      <pubDate>Mon, 29 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/greedy/</guid>
      <description>overview 各ステップにおいて、局所的な最適な決定を繰り返すソリューション 必ずしも最適解を導くわけではない bootcamp 1,5,10,25,50,100セントを使</description>
    </item>
    
    <item>
      <title>android/iphoneでローカルサーバに接続する</title>
      <link>https://chaingng.github.io/post/local_smartphone/</link>
      <pubDate>Fri, 26 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/local_smartphone/</guid>
      <description>1.ローカルサーバを立ち上げているPCとスマートフォンを同じwifiに接続 2. Internet共有を有効にする macであればシステム環境設定＞</description>
    </item>
    
    <item>
      <title>djangoでのloggerの使い方</title>
      <link>https://chaingng.github.io/post/django_logger/</link>
      <pubDate>Thu, 25 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/django_logger/</guid>
      <description>djangoでloggerを使うには、loggerの要素（formatters、loggers、filters、handlers）とログレベ</description>
    </item>
    
    <item>
      <title>csrf対策</title>
      <link>https://chaingng.github.io/post/csrf/</link>
      <pubDate>Wed, 24 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/csrf/</guid>
      <description>CSRFとは Cross Site Request Forgeryの略。 ユーザーがWebアプリケーションにログインすると、CookieにSessionIDがセットされる。 その</description>
    </item>
    
    <item>
      <title>I want to keep creating valuable things with my own hands - a turning point that I grasped with dev-sumi and a resolve as an engineer</title>
      <link>https://chaingng.github.io/post/career_interview/</link>
      <pubDate>Tue, 23 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/career_interview/</guid>
      <description>This is an English version of my career interview
Developers&amp;rsquo; event &amp;ldquo;Developers Summit&amp;rdquo; to be held in Meguro Gajyo every February, so-called &amp;ldquo;dev-sami&amp;rdquo;. Various sessions will be held, but how can we use what we got there? This time I talked to Mr. Takatomo Honda of freee Co., Ltd., which had a career turning point as a result of participation in Developers Summit 2016.
As an engineer I always wanted to creating things with my own hands - First of all I will ask about my career.</description>
    </item>
    
    <item>
      <title>IP datacast solution</title>
      <link>https://chaingng.github.io/post/ip_datacast/</link>
      <pubDate>Tue, 23 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/ip_datacast/</guid>
      <description>This is an English version of my written technical article. (Please see original URL for reference figures)
IP datacast (IPDC: IP Data Cast) is a technology for carrying multimedia file data by broadcasting IP packets on broadcasting and communication to various device terminals simultaneously. NTT DATA is working on the development and standardization of IP datacast technology that realizes new services in broadcasting and communications fields. Here we introduce the technical overview and features of IPDC, application examples, latest technologies under development and future prospects.</description>
    </item>
    
    <item>
      <title>Wi-Fi multicast that realizes simultaneous broadcast distribution service to a large number</title>
      <link>https://chaingng.github.io/post/wifi_multicast/</link>
      <pubDate>Tue, 23 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/wifi_multicast/</guid>
      <description>This is an English version of my written technical article
Wi-Fi multicast By using Wi-Fi multicast technology, multimedia contents such as movies etc. can be delivered simultaneously to all terminals where Wi-Fi can reach.
Two distribution methods As delivery modes of Wi-Fi multicast technology, there are two types of real-time viewing services by live streaming and two patterns of accumulating files on the terminal by file cast delivery. By making good use of these two forms, it is possible to realize a shift time viewing service that can be viewed anytime and anywhere.</description>
    </item>
    
    <item>
      <title>[python]__repr__と__str__の違い</title>
      <link>https://chaingng.github.io/post/python_repr/</link>
      <pubDate>Mon, 22 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_repr/</guid>
      <description>Referenceによると以下の通り。 __str__(self) オブジェクトの「非公式の (informal)」あるいは表示に適した文字列表現を計算するために呼ばれる</description>
    </item>
    
    <item>
      <title>再帰の基礎</title>
      <link>https://chaingng.github.io/post/recursion/</link>
      <pubDate>Mon, 22 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/recursion/</guid>
      <description>overview 部分的により小さいソリューションに分解できる問題 検索、列挙、分割統治、複雑な問題の分解は再帰を適用できる可能性がある 再帰関数はベースケース</description>
    </item>
    
    <item>
      <title>動的計画法の基礎</title>
      <link>https://chaingng.github.io/post/dynamic_programming/</link>
      <pubDate>Mon, 22 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/dynamic_programming/</guid>
      <description>overview DPはいつでも解法の１つになりえる 特にサブ問題に関連する問題に適用できる 分割統治との違いは、同じサブ問題が何度も起こり得ること。そのため、</description>
    </item>
    
    <item>
      <title>SQLの基礎</title>
      <link>https://chaingng.github.io/post/sql/</link>
      <pubDate>Mon, 15 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/sql/</guid>
      <description>SQLの実行順序 FROM WHERE GROUP BY HAVING SELECT ORDER_GY DBの作成 CREATE DATABASE shop; テーブルの作成 CREATE TABLE Shohin (shohin_id CHAR(4) NOT NULL, shohin_mei VARCHAR(100) NOT NULL; PRIMARY KEY (shohin_id) ); DEFAULT制約をつければデフォルト値を入れられ</description>
    </item>
    
    <item>
      <title>pythonデータ型ごとのメモリサイズ</title>
      <link>https://chaingng.github.io/post/python_type_bits/</link>
      <pubDate>Mon, 15 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_type_bits/</guid>
      <description>int intはデフォルトで28bit &amp;gt;&amp;gt;&amp;gt; import sys &amp;gt;&amp;gt;&amp;gt; sys.getsizeof(1) 28 超えると自動で拡張される &amp;gt;&amp;gt;&amp;gt; sys.getsizeof(1&amp;lt;&amp;lt;32) 32 &amp;gt;&amp;gt;&amp;gt; sys.getsizeof(1&amp;lt;&amp;lt;60) 36 &amp;gt;&amp;gt;&amp;gt; sys.getsizeof(1 &amp;lt;&amp;lt; 10000) 1360 Python3.0をみると、整数型の上限が廃止され</description>
    </item>
    
    <item>
      <title>ソートの基礎</title>
      <link>https://chaingng.github.io/post/sorting/</link>
      <pubDate>Mon, 15 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/sorting/</guid>
      <description>overview ソートは検索を早くするプリプロセスとして使われる 似ているアイテムを探すのにも使われる ヒープソート in-placeだが安定でない spaceO(1) マージソー</description>
    </item>
    
    <item>
      <title>AWSの認証情報はshared credential fileで管理する</title>
      <link>https://chaingng.github.io/post/aws_credential_file/</link>
      <pubDate>Mon, 08 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/aws_credential_file/</guid>
      <description>様々なAWSサービスを使っていると複数のcredential情報を使い分けることが多くなる。 プログラムに直接credentialを書きたくな</description>
    </item>
    
    <item>
      <title>[flask] Blueprintを用いたアプリケーションの分割とベストプラクティス</title>
      <link>https://chaingng.github.io/post/flask_blueprint/</link>
      <pubDate>Mon, 08 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/flask_blueprint/</guid>
      <description>Blueprintとは Blueprintとは、アプリケーションを分割するための機能です。 Blueprintを使うことで、関連するビューやコー</description>
    </item>
    
    <item>
      <title>ハッシュテーブルの概要</title>
      <link>https://chaingng.github.io/post/hash/</link>
      <pubDate>Mon, 08 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/hash/</guid>
      <description>overview 挿入、削除、参照がO(1) 衝突に対する実装が必要 linked-listを使うなど 衝突が発生すると、O(1+n/m)に増えていく（m:配列の</description>
    </item>
    
    <item>
      <title>linuxとmacにおける検索</title>
      <link>https://chaingng.github.io/post/linux_mac_find/</link>
      <pubDate>Sun, 07 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/linux_mac_find/</guid>
      <description>コマンドに対する検索 which 指定されたコマンドの場所を調べる $ which python /Users/hondatakatomo/.pyenv/shims/python オプション-aですべて調べる $ which -a python /Users/hondatakatomo/.pyenv/shims/python /usr/bin/python whereis 指定されたコマンドのバイナリーファイ</description>
    </item>
    
    <item>
      <title>linuxにおけるパッケージ管理</title>
      <link>https://chaingng.github.io/post/linux_package_management/</link>
      <pubDate>Sat, 06 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/linux_package_management/</guid>
      <description>RPM Red Hat Package Managerと呼ばれ、元々はRed Hatによって開発され、実装。 その後、GNUオープンソースオペレーティングシステムで受け入れられ</description>
    </item>
    
    <item>
      <title>linuxにおけるシグナルとkill</title>
      <link>https://chaingng.github.io/post/linux_process/</link>
      <pubDate>Fri, 05 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/linux_process/</guid>
      <description>シグナルとは シグナルとは、プロセスに対して通知するイベント。 シグナルを受け取ったプロセスは現在実行中の処理を中断し、シグナルに応じた処理を実</description>
    </item>
    
    <item>
      <title>linuxでダミーファイルを作成する</title>
      <link>https://chaingng.github.io/post/dd/</link>
      <pubDate>Thu, 04 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/dd/</guid>
      <description>ブロック単位でファイルをコピー・変換するコマンドであるddを使う。 tempfile.txtという名前で50Mのファイルを作成 dd if=/dev/zero of=tempfile.txt bs=1024 count=50000 オプシ</description>
    </item>
    
    <item>
      <title>python2ではtimestamp()が使えないのでdatetimeに変換して日付を比較する</title>
      <link>https://chaingng.github.io/post/python_timestamp/</link>
      <pubDate>Tue, 02 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_timestamp/</guid>
      <description>python3ではdatetimeをタイム・スタンプに変換するtimestamp()が使えるが、python2では存在しない。 そこで、日付の</description>
    </item>
    
    <item>
      <title>gitで特定のコミットの状態に戻す</title>
      <link>https://chaingng.github.io/post/git_reset/</link>
      <pubDate>Mon, 01 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/git_reset/</guid>
      <description>git resetを使う。 git reset --hard [COMMIT_HASH] で指定したコミットの状態に戻すことができる。 戻したいcommitのhashを確認する $ git log commit 804c6b5c0d5b66caa6e49d788d2e6c4fe2cfa9a0 (HEAD -&amp;gt; master) Author: Takatomo Honda &amp;lt;chngng0103@gmail.com&amp;gt; Date: Sun</description>
    </item>
    
    <item>
      <title>pythonでユーザ用にランダムな英数字パスワードを生成する</title>
      <link>https://chaingng.github.io/post/python_random_user_password/</link>
      <pubDate>Mon, 01 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_random_user_password/</guid>
      <description>英数字8文字のランダムパスワードを生成 &amp;gt;&amp;gt;&amp;gt; import random, string &amp;gt;&amp;gt;&amp;gt; &#39;&#39;.join([random.choice(string.ascii_letters + string.digits) for i in range(8)]) &#39;8GkJXlpr&#39; 数字だけの場合はstring.digitsのみにし、長さを変更したい場合は8</description>
    </item>
    
    <item>
      <title>連結リストの概要</title>
      <link>https://chaingng.github.io/post/linked_list/</link>
      <pubDate>Sun, 31 Dec 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/linked_list/</guid>
      <description>概要 片方向リスト、双方向リスト、循環リストがある 挿入と削除がO(1) 検索がO(n) 配列と比較したトレードオフ 追加の場合、配列は限界がありフラ</description>
    </item>
    
    <item>
      <title>連結リストの実装</title>
      <link>https://chaingng.github.io/post/linked_list_code/</link>
      <pubDate>Sun, 24 Dec 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/linked_list_code/</guid>
      <description>class DoublyLinkedListNode(object): def __init__(self, value): self.value = value self.next = None self.prev = None class SinglyLinkedListNode(object): def __init__(self, value): self.value = value self.next = None</description>
    </item>
    
    <item>
      <title>Stackの基礎</title>
      <link>https://chaingng.github.io/post/queue_stack/</link>
      <pubDate>Sun, 17 Dec 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/queue_stack/</guid>
      <description>概要 pushとpopが基本動作。LIFO time O(1) 配列で実装可能 peek操作もある（要素の山椒の実で取り出さない） 8.1 MAX値を返せるStackの実</description>
    </item>
    
    <item>
      <title>二分探索木の基礎</title>
      <link>https://chaingng.github.io/post/binary_search_tree/</link>
      <pubDate>Sun, 17 Dec 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/binary_search_tree/</guid>
      <description>概要 keyを効率良く探すことができ、かつmin/maxも同様に効率的に探せる keyの範囲も探すことができる ソートされた配列と似ているが、ke</description>
    </item>
    
    <item>
      <title>ヒープの基礎</title>
      <link>https://chaingng.github.io/post/heap/</link>
      <pubDate>Sun, 10 Dec 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/heap/</guid>
      <description>概要 ヒープは特別な二分木 完全二分木である 親ノードの値は子よりも小さい（最小ヒープのとき） 配列で実装できる。親iの子は2i+1, 2i+2 挿入と削除が</description>
    </item>
    
    <item>
      <title>二分木の基礎</title>
      <link>https://chaingng.github.io/post/binary_tree/</link>
      <pubDate>Sun, 10 Dec 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/binary_tree/</guid>
      <description>概要 空であるか、左の二分木の子と右の二分木の子をもつroot nodeがある木 二分探索木としてのコンテキストでよく現れる すべての木をたどるには</description>
    </item>
    
    <item>
      <title>二分探索の基礎と実装</title>
      <link>https://chaingng.github.io/post/binary_search/</link>
      <pubDate>Sun, 03 Dec 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/binary_search/</guid>
      <description>概要 sorting O(nlogn) search O(logn) mid = (low + high)/2 はオーバーフローしてしまう mid = low + (high - low)/2ならよい 実装 def bsearch(t,A): low, high = 0, len(A)-1 while low &amp;lt;= high: mid = (low + high)//2 if A[mid] &amp;lt; t: low = mid + 1 else if A[mid]</description>
    </item>
    
    <item>
      <title>文字列の基礎</title>
      <link>https://chaingng.github.io/post/string/</link>
      <pubDate>Sun, 26 Nov 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/string/</guid>
      <description>概要 比較、コピー、連結、分割、マッチなど基本操作について理解する brute-forceではO(n)spaceだが、ソリューションによってはO</description>
    </item>
    
    <item>
      <title>Javaとオブジェクト指向</title>
      <link>https://chaingng.github.io/post/java_object/</link>
      <pubDate>Sun, 19 Nov 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/java_object/</guid>
      <description>javaファイルの作成と実行 MyFirstApp.java public class MyFirstApp{ public static void main(String [] args){ System.out.println(&amp;quot;Hello World!&amp;quot;); } } $javac MyFirstApp.java $java MyFirstApp Hello World! JVMとコンパイラ JVM プログラムを動かす – インタープリタ方式で逐次解釈・実</description>
    </item>
    
    <item>
      <title>配列の基礎</title>
      <link>https://chaingng.github.io/post/array/</link>
      <pubDate>Sun, 19 Nov 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/array/</guid>
      <description>概要 データの取得と更新がO(1) 削除がO(n-i) 時々resizingが必要になる brute forceでO(n)spaceだが、ソリューションによっ</description>
    </item>
    
    <item>
      <title>sftpコマンドまとめ</title>
      <link>https://chaingng.github.io/post/sftp_command/</link>
      <pubDate>Sun, 12 Nov 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/sftp_command/</guid>
      <description>目次 基本操作 get ファイルをダウンロード ディレクトリを指定してのファイルダウンロード ディレクトリごとまとめてダウンロード put ファイルをアップロード</description>
    </item>
    
    <item>
      <title>python string文字列の使い方</title>
      <link>https://chaingng.github.io/post/python_string/</link>
      <pubDate>Sun, 30 Apr 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_string/</guid>
      <description>連続して並んでいる文字を連結する &amp;gt;&amp;gt;&amp;gt; &#39;Py&#39; &#39;thon&#39; &#39;Python&#39; 負のindexを指定 &amp;gt;&amp;gt;&amp;gt; word = &#39;Python&#39; &amp;gt;&amp;gt;&amp;gt; word[-1] # last character &#39;n&#39; &amp;gt;&amp;gt;&amp;gt; word[-2] # second-last character &#39;o&#39; &amp;gt;&amp;gt;&amp;gt; word[-6] &#39;P&#39; スライス &amp;gt;&amp;gt;&amp;gt; word[:2] # character from the beginning to position 2 (excluded) &#39;Py&#39; &amp;gt;&amp;gt;&amp;gt; word[4:] # characters from</description>
    </item>
    
    <item>
      <title>pipenvの使い方</title>
      <link>https://chaingng.github.io/post/pipenv/</link>
      <pubDate>Sun, 23 Apr 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/pipenv/</guid>
      <description>pipenvを使うことにより、rubyにおけるGemfileのようにpythonでpackage管理を行うことができる。 目次 利点 特徴 インスト</description>
    </item>
    
    <item>
      <title>foreverでnode.jsアプリケーションをデーモン化</title>
      <link>https://chaingng.github.io/post/nodejs_forever/</link>
      <pubDate>Sun, 16 Apr 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/nodejs_forever/</guid>
      <description>foreverを使うことで、nodeまたは任意のスクリプトをデーモン化することができる。 インストール npm install forever -g nodeスクリプトをデーモン起動</description>
    </item>
    
    <item>
      <title>node.jsで環境変数を設定・取得</title>
      <link>https://chaingng.github.io/post/nodejs_env/</link>
      <pubDate>Sun, 09 Apr 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/nodejs_env/</guid>
      <description>node.jsで環境変数を設定・取得するにはprocess.envを使う。 目次 環境変数の一覧を取得 特定の環境変数を取得 環境変数の設定と変更 環</description>
    </item>
    
    <item>
      <title>gitでパスワードを保存する</title>
      <link>https://chaingng.github.io/post/git_save_pw/</link>
      <pubDate>Sun, 02 Apr 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/git_save_pw/</guid>
      <description>httpsアクセスの際、githubへのアクセスにはパスワード or personal access token（二段階認証を設定している場合）が必要になる。 デフォルトでは、</description>
    </item>
    
    <item>
      <title>logjam脆弱性と対策</title>
      <link>https://chaingng.github.io/post/logjam/</link>
      <pubDate>Sun, 26 Mar 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/logjam/</guid>
      <description>logjamとは、DH鍵交換に存在する脆弱性を利用した攻撃。 公式ソースであるWeak Diffie-Hellman and the Logjam Attackに書かれている、脆弱性の詳細と対策に</description>
    </item>
    
    <item>
      <title>幸せをお金で買う方法(TED) - まとめ</title>
      <link>https://chaingng.github.io/post/how_to_buy_happiness/</link>
      <pubDate>Sun, 19 Mar 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/how_to_buy_happiness/</guid>
      <description>How to buy happiness 幸せをお金で買う方法 多くの人は幸せを買う方法はないと考える。 でも、実は、幸せを買う方法はある。 それは、「他人のためにお金を使うこと」</description>
    </item>
    
    <item>
      <title>[要約]A Better Pip Workflow</title>
      <link>https://chaingng.github.io/post/a_better_pip_workflow/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/a_better_pip_workflow/</guid>
      <description>requirements.txtを使うのには問題があるよ、という話。 典型的なrequirements.txtの使い方 １．A list of top-level dependencies a project has, often without</description>
    </item>
    
    <item>
      <title>ng-includeで読み込んだパーシャルをキャッシュさせない</title>
      <link>https://chaingng.github.io/post/ng_include/</link>
      <pubDate>Sun, 05 Mar 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/ng_include/</guid>
      <description>angularjsにてhtmlをパーシャルしたい場合は、ng-includeを使う。 &amp;lt;div ng-include=&amp;quot;&#39;views/home/sidebar/_issue_list.html&#39;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; パーシャルが常にcacheされてしまう ただしこの場合</description>
    </item>
    
    <item>
      <title>[要約]CodeComplete 15章 条件文の使用</title>
      <link>https://chaingng.github.io/post/code_complete_15/</link>
      <pubDate>Sun, 26 Feb 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/code_complete_15/</guid>
      <description>if文 正常なケースの実行文を先に書いてから、例外的なケースを書く 可読性とパフォーマンスの面で重要 if(){ ##正常ケース } else(){ ##例外ケース } 正常なケ</description>
    </item>
    
    <item>
      <title>ElasticSearchの導入</title>
      <link>https://chaingng.github.io/post/elasticsearch_install/</link>
      <pubDate>Sun, 19 Feb 2017 00:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/elasticsearch_install/</guid>
      <description>目次 動作環境 インストール 自動起動設定 プラグインのインストール 起動確認 動かないとき 動作環境 Ubuntu14.04 インストール Java8が必要 apt-get install -y openjdk-8-jdk その後公式にそ</description>
    </item>
    
    <item>
      <title>crowi用のvagrantを公開しました</title>
      <link>https://chaingng.github.io/post/vagrant_crowi/</link>
      <pubDate>Sun, 12 Feb 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/vagrant_crowi/</guid>
      <description>情報集約用にwikiをいろいろ試していて、crowiを試してみることにした。 いくつかセットアップが必要だったので、vagrantでワンタッチ</description>
    </item>
    
    <item>
      <title>リモート追跡ブランチ・追跡ブランチ・リモートブランチの違い</title>
      <link>https://chaingng.github.io/post/git_branch/</link>
      <pubDate>Sun, 05 Feb 2017 00:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/git_branch/</guid>
      <description>まとめ リモートブランチ リモートレポジトリに存在するブランチ (remote)/(branch)で表される リモート追跡ブランチ ローカルに存在 リモ</description>
    </item>
    
    <item>
      <title>shebangから理解するUNIXの仕組み</title>
      <link>https://chaingng.github.io/post/shebang_init/</link>
      <pubDate>Sun, 29 Jan 2017 09:22:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/shebang_init/</guid>
      <description>unixでシェルスクリプトを書くとき、冒頭に#!/bin/shと書くことは当たり前なのだけど、 時々コマンドなんだっけ、と忘れることがあった。</description>
    </item>
    
    <item>
      <title>httpにおける適切なステータスコードの選択</title>
      <link>https://chaingng.github.io/post/http_status_code/</link>
      <pubDate>Sun, 15 Jan 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/http_status_code/</guid>
      <description>このフローチャートをみれば全て解決。 http://racksburg.com/choosing-an-http-status-code/ 日本語版 http://postd.cc/choosing-an-http-status-code/</description>
    </item>
    
    <item>
      <title>vagrantの使い方</title>
      <link>https://chaingng.github.io/post/vagrant/</link>
      <pubDate>Sun, 08 Jan 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/vagrant/</guid>
      <description>インストール 公式のDownloadページから、対応するOSのパッケージをダウンロードしてインストール VagrantFileの作成 vagrant initを</description>
    </item>
    
    <item>
      <title>公開鍵によるsshアクセスの設定</title>
      <link>https://chaingng.github.io/post/linux_ssh_key/</link>
      <pubDate>Sun, 01 Jan 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/linux_ssh_key/</guid>
      <description>手順 ssh-keygenにて公開鍵と秘密鍵を作成 秘密鍵のパーミッションを変更 サーバにて対象ユーザのauthorized_keysに作成した公</description>
    </item>
    
  </channel>
</rss>