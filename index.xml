<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>takatomo&#39;s blog</title>
    <link>https://chaingng.github.io/</link>
    <description>Recent content on takatomo&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 01 Feb 2018 10:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://chaingng.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>文字コードとは</title>
      <link>https://chaingng.github.io/post/charset/</link>
      <pubDate>Thu, 01 Feb 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/charset/</guid>
      <description>文字コード 広義では、文字にバイト表現を割り当て、その対応表を文字コードと呼ぶ 文字集合と符号化方式 文字コードは文字集合(ccs)と符号化方式(</description>
    </item>
    
    <item>
      <title>pythonの比較におけるisと==の違い</title>
      <link>https://chaingng.github.io/post/python_is/</link>
      <pubDate>Tue, 30 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_is/</guid>
      <description>referenceによると、以下の通り。 ==とis ==はオブジェクトの値が同一か比較する。基本はこちらを使う。 isは同じオブジェクトがどうか</description>
    </item>
    
    <item>
      <title>5Lと3Lのボトルで4Lの水を計る</title>
      <link>https://chaingng.github.io/post/prime_water/</link>
      <pubDate>Mon, 29 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/prime_water/</guid>
      <description>水の移し方 ３Lの水をくんで、５Lのボトルに移す。 その後５Lのボトルをいっぱいにしても捨てなければいけないので、 常に３Lの水をくんで５Lの水に</description>
    </item>
    
    <item>
      <title>assetsの読み込み前にDOMの制御をしたい場合はDOMContentLoadedを使う</title>
      <link>https://chaingng.github.io/post/wait_dom_load/</link>
      <pubDate>Mon, 29 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/wait_dom_load/</guid>
      <description>すべてのCSSや画像などのassetsの読み込みまで待つのは時間がかかってしまうので避けたい。 しかしDOMの制御をするためにDOMの読み込み</description>
    </item>
    
    <item>
      <title>android/iphoneでローカルサーバに接続する</title>
      <link>https://chaingng.github.io/post/local_smartphone/</link>
      <pubDate>Fri, 26 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/local_smartphone/</guid>
      <description>1.ローカルサーバを立ち上げているPCとスマートフォンを同じwifiに接続 2. Internet共有を有効にする macであればシステム環境設定＞</description>
    </item>
    
    <item>
      <title>djangoでのloggerの使い方</title>
      <link>https://chaingng.github.io/post/django_logger/</link>
      <pubDate>Thu, 25 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/django_logger/</guid>
      <description>djangoでloggerを使うには、loggerの要素（formatters、loggers、filters、handlers）とログレベ</description>
    </item>
    
    <item>
      <title>csrf対策</title>
      <link>https://chaingng.github.io/post/csrf/</link>
      <pubDate>Wed, 24 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/csrf/</guid>
      <description>CSRFとは Cross Site Request Forgeryの略。 ユーザーがWebアプリケーションにログインすると、CookieにSessionIDがセットされる。 その</description>
    </item>
    
    <item>
      <title>I want to keep creating valuable things with my own hands - a turning point that I grasped with dev-sumi and a resolve as an engineer</title>
      <link>https://chaingng.github.io/post/career_interview/</link>
      <pubDate>Tue, 23 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/career_interview/</guid>
      <description>This is an English version of my career interview
Developers&amp;rsquo; event &amp;ldquo;Developers Summit&amp;rdquo; to be held in Meguro Gajyo every February, so-called &amp;ldquo;dev-sami&amp;rdquo;. Various sessions will be held, but how can we use what we got there? This time I talked to Mr. Takatomo Honda of freee Co., Ltd., which had a career turning point as a result of participation in Developers Summit 2016.
As an engineer I always wanted to creating things with my own hands - First of all I will ask about my career.</description>
    </item>
    
    <item>
      <title>IP datacast solution</title>
      <link>https://chaingng.github.io/post/ip_datacast/</link>
      <pubDate>Tue, 23 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/ip_datacast/</guid>
      <description>This is an English version of my written technical article. (Please see original URL for reference figures)
IP datacast (IPDC: IP Data Cast) is a technology for carrying multimedia file data by broadcasting IP packets on broadcasting and communication to various device terminals simultaneously. NTT DATA is working on the development and standardization of IP datacast technology that realizes new services in broadcasting and communications fields. Here we introduce the technical overview and features of IPDC, application examples, latest technologies under development and future prospects.</description>
    </item>
    
    <item>
      <title>Wi-Fi multicast that realizes simultaneous broadcast distribution service to a large number</title>
      <link>https://chaingng.github.io/post/wifi_multicast/</link>
      <pubDate>Tue, 23 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/wifi_multicast/</guid>
      <description>This is an English version of my written technical article
Wi-Fi multicast By using Wi-Fi multicast technology, multimedia contents such as movies etc. can be delivered simultaneously to all terminals where Wi-Fi can reach.
Two distribution methods As delivery modes of Wi-Fi multicast technology, there are two types of real-time viewing services by live streaming and two patterns of accumulating files on the terminal by file cast delivery. By making good use of these two forms, it is possible to realize a shift time viewing service that can be viewed anytime and anywhere.</description>
    </item>
    
    <item>
      <title>[python]__repr__と__str__の違い</title>
      <link>https://chaingng.github.io/post/python_repr/</link>
      <pubDate>Mon, 22 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_repr/</guid>
      <description>Referenceによると以下の通り。 __str__(self) オブジェクトの「非公式の (informal)」あるいは表示に適した文字列表現を計算するために呼ばれる</description>
    </item>
    
    <item>
      <title>pythonデータ型ごとのメモリサイズ</title>
      <link>https://chaingng.github.io/post/python_type_bits/</link>
      <pubDate>Mon, 15 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_type_bits/</guid>
      <description>int intはデフォルトで28bit &amp;gt;&amp;gt;&amp;gt; import sys &amp;gt;&amp;gt;&amp;gt; sys.getsizeof(1) 28 超えると自動で拡張される &amp;gt;&amp;gt;&amp;gt; sys.getsizeof(1&amp;lt;&amp;lt;32) 32 &amp;gt;&amp;gt;&amp;gt; sys.getsizeof(1&amp;lt;&amp;lt;60) 36 &amp;gt;&amp;gt;&amp;gt; sys.getsizeof(1 &amp;lt;&amp;lt; 10000) 1360 Python3.0をみると、整数型の上限が廃止され</description>
    </item>
    
    <item>
      <title>AWSの認証情報はshared credential fileで管理する</title>
      <link>https://chaingng.github.io/post/aws_credential_file/</link>
      <pubDate>Mon, 08 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/aws_credential_file/</guid>
      <description>様々なAWSサービスを使っていると複数のcredential情報を使い分けることが多くなる。 プログラムに直接credentialを書きたくな</description>
    </item>
    
    <item>
      <title>gitで特定のコミットの状態に戻す</title>
      <link>https://chaingng.github.io/post/git_reset/</link>
      <pubDate>Mon, 01 Jan 2018 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/git_reset/</guid>
      <description>git resetを使う。 git reset --hard [COMMIT_HASH] で指定したコミットの状態に戻すことができる。 戻したいcommitのhashを確認する $ git log commit 804c6b5c0d5b66caa6e49d788d2e6c4fe2cfa9a0 (HEAD -&amp;gt; master) Author: Takatomo Honda &amp;lt;chngng0103@gmail.com&amp;gt; Date: Sun</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://chaingng.github.io/me/</link>
      <pubDate>Sat, 08 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/me/</guid>
      <description>Takatomo Honda chngng0103@gmail.com My featured skills and endorsements : Back-End Web Development, Python, Ruby on Rails, API Design &amp;amp; Development, AWS, Web Scraping, Test Automation, Network Design, Wireless Networking work history Feasible lab inc. CTO Aug 2017 - Present Software Engineering, Technical Leading, and Project Management Archievements I built the effective issue tracking service ( https://webkadai.jp/ ). I built the easy web video conference service ( https://fli.videotalk.jp/honda/ ). I developed</description>
    </item>
    
    <item>
      <title>hugo first post</title>
      <link>https://chaingng.github.io/post/hoge/</link>
      <pubDate>Wed, 05 Jul 2017 10:21:23 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/hoge/</guid>
      <description>ようこそ， Hugo の世界へ！！</description>
    </item>
    
    <item>
      <title>python string文字列の使い方</title>
      <link>https://chaingng.github.io/post/python_string/</link>
      <pubDate>Sun, 30 Apr 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/python_string/</guid>
      <description>連続して並んでいる文字を連結する &amp;gt;&amp;gt;&amp;gt; &#39;Py&#39; &#39;thon&#39; &#39;Python&#39; 負のindexを指定 &amp;gt;&amp;gt;&amp;gt; word = &#39;Python&#39; &amp;gt;&amp;gt;&amp;gt; word[-1] # last character &#39;n&#39; &amp;gt;&amp;gt;&amp;gt; word[-2] # second-last character &#39;o&#39; &amp;gt;&amp;gt;&amp;gt; word[-6] &#39;P&#39; スライス &amp;gt;&amp;gt;&amp;gt; word[:2] # character from the beginning to position 2 (excluded) &#39;Py&#39; &amp;gt;&amp;gt;&amp;gt; word[4:] # characters from</description>
    </item>
    
    <item>
      <title>pipenvの使い方</title>
      <link>https://chaingng.github.io/post/pipenv/</link>
      <pubDate>Sun, 23 Apr 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/pipenv/</guid>
      <description>pipenvを使うことにより、rubyにおけるGemfileのようにpythonでpackage管理を行うことができる。 いいところ pip と virtualenv が連</description>
    </item>
    
    <item>
      <title>foreverでnode.jsアプリケーションをデーモン化</title>
      <link>https://chaingng.github.io/post/nodejs_forever/</link>
      <pubDate>Sun, 16 Apr 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/nodejs_forever/</guid>
      <description>foreverを使うことで、nodeまたは任意のスクリプトをデーモン化することができる。 インストール npm install forever -g nodeスクリプトをデーモン起動</description>
    </item>
    
    <item>
      <title>node.jsで環境変数を設定・取得</title>
      <link>https://chaingng.github.io/post/nodejs_env/</link>
      <pubDate>Sun, 09 Apr 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/nodejs_env/</guid>
      <description>node.jsで環境変数を設定・取得するにはprocess.envを使う。 環境変数の一覧を取得 process.envですべての環境変数が取得</description>
    </item>
    
    <item>
      <title>gitでパスワードを保存する</title>
      <link>https://chaingng.github.io/post/git_save_pw/</link>
      <pubDate>Sun, 02 Apr 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/git_save_pw/</guid>
      <description>httpsアクセスの際、githubへのアクセスにはパスワード or personal access token（二段階認証を設定している場合）が必要になる。 デフォルトでは、</description>
    </item>
    
    <item>
      <title>logjam脆弱性と対策</title>
      <link>https://chaingng.github.io/post/logjam/</link>
      <pubDate>Sun, 26 Mar 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/logjam/</guid>
      <description>Weak Diffie-Hellman and the Logjam Attackに詳細が記載されている。 これに従って、詳細を整理しておく。 logjamとは ディフィー・ヘルマン鍵交換における脆弱性を利</description>
    </item>
    
    <item>
      <title>幸せをお金で買う方法(TED) - まとめ</title>
      <link>https://chaingng.github.io/post/how_to_buy_happiness/</link>
      <pubDate>Sun, 19 Mar 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/how_to_buy_happiness/</guid>
      <description>How to buy happiness 幸せをお金で買う方法 多くの人は幸せを買う方法はないと考える。 でも、実は、幸せを買う方法はある。 それは、「他人のためにお金を使うこと」</description>
    </item>
    
    <item>
      <title>[要約]A Better Pip Workflow</title>
      <link>https://chaingng.github.io/post/a_better_pip_workflow/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/a_better_pip_workflow/</guid>
      <description>requirements.txtを使うのには問題があるよ、という話。 典型的なrequirements.txtの使い方 １．A list of top-level dependencies a project has, often without</description>
    </item>
    
    <item>
      <title>ng-includeで読み込んだパーシャルをキャッシュさせない</title>
      <link>https://chaingng.github.io/post/ng_include/</link>
      <pubDate>Sun, 05 Mar 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/ng_include/</guid>
      <description>angularjsにてhtmlをパーシャルしたい場合は、ng-includeを使う。 &amp;lt;div ng-include=&amp;quot;&#39;views/home/sidebar/_issue_list.html&#39;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; パーシャルが常にcacheされてしまう ただしこの場合</description>
    </item>
    
    <item>
      <title>[要約]CodeComplete 15章 条件文の使用</title>
      <link>https://chaingng.github.io/post/code_complete_15/</link>
      <pubDate>Sun, 26 Feb 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/code_complete_15/</guid>
      <description>if文 正常なケースの実行文を先に書いてから、例外的なケースを書く 可読性とパフォーマンスの面で重要 if(){ ##正常ケース } else(){ ##例外ケース } 正常なケ</description>
    </item>
    
    <item>
      <title>ElasticSearchの導入</title>
      <link>https://chaingng.github.io/post/elasticsearch_install/</link>
      <pubDate>Sun, 19 Feb 2017 00:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/elasticsearch_install/</guid>
      <description>動作環境 Ubuntu14.04 インストール Java8が必要 apt-get install -y openjdk-8-jdk その後公式にそってelasticsearchをインストール wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add - sudo apt-get install -y apt-transport-https echo &amp;quot;deb https://artifacts.elastic.co/packages/5.x/apt stable</description>
    </item>
    
    <item>
      <title>crowi用のvagrantを公開しました</title>
      <link>https://chaingng.github.io/post/vagrant_crowi/</link>
      <pubDate>Sun, 12 Feb 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/vagrant_crowi/</guid>
      <description>情報集約用にwikiをいろいろ試していて、crowiを試してみることにした。 いくつかセットアップが必要だったので、vagrantでワンタッチ</description>
    </item>
    
    <item>
      <title>リモート追跡ブランチ／追跡ブランチ／リモートブランチの違い</title>
      <link>https://chaingng.github.io/post/git_branch/</link>
      <pubDate>Sun, 05 Feb 2017 00:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/git_branch/</guid>
      <description>まとめ リモートブランチ リモートレポジトリに存在するブランチ (remote)/(branch)で表される リモート追跡ブランチ ローカルに存在 リモ</description>
    </item>
    
    <item>
      <title>shebangから理解するUNIXの仕組み</title>
      <link>https://chaingng.github.io/post/shebang_init/</link>
      <pubDate>Sun, 29 Jan 2017 09:22:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/shebang_init/</guid>
      <description>unixでシェルスクリプトを書くとき、冒頭に#!/bin/shと書くことは当たり前なのだけど、 時々コマンドなんだっけ、と忘れることがあった。</description>
    </item>
    
    <item>
      <title>防御的プログラミング(CodeCompleteのまとめ)</title>
      <link>https://chaingng.github.io/post/%E9%98%B2%E5%BE%A1%E7%9A%84%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</link>
      <pubDate>Sun, 22 Jan 2017 12:04:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E9%98%B2%E5%BE%A1%E7%9A%84%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</guid>
      <description>CodeComplete 第8章防御的プログラミングのまとめ。 防御的プログラミングとは、「そうなるはずだ」と決めつけないこと、 防御運転にヒントを得たものである。 無効</description>
    </item>
    
    <item>
      <title>httpにおける適切なステータスコードの選択</title>
      <link>https://chaingng.github.io/post/http_status_code/</link>
      <pubDate>Sun, 15 Jan 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/http_status_code/</guid>
      <description>このフローチャートをみれば全て解決。 http://racksburg.com/choosing-an-http-status-code/ 日本語版 http://postd.cc/choosing-an-http-status-code/</description>
    </item>
    
    <item>
      <title>vagrantの使い方</title>
      <link>https://chaingng.github.io/post/vagrant/</link>
      <pubDate>Sun, 08 Jan 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/vagrant/</guid>
      <description>インストール 公式のDownloadページから、対応するOSのパッケージをダウンロードしてインストール VagrantFileの作成 vagrant initを</description>
    </item>
    
    <item>
      <title>公開鍵によるsshアクセスの設定</title>
      <link>https://chaingng.github.io/post/linux_ssh_key/</link>
      <pubDate>Sun, 01 Jan 2017 10:00:00 +0900</pubDate>
      
      <guid>https://chaingng.github.io/post/linux_ssh_key/</guid>
      <description>ssh-keygenにて公開鍵と秘密鍵を作成 $ ssh-keygen -t rsa -b 2048 Generating public/private rsa key pair. Enter file in which to save the key (/Users/hondatakatomo/.ssh/id_rsa): /Users/hondatakatomo/.ssh/hogefuga Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/hondatakatomo/.ssh/hogefuga. Your public key has been saved in /Users/hondatakatomo/.ssh/hogefuga.pub. The key</description>
    </item>
    
    <item>
      <title>投資信託の見直しまとめ</title>
      <link>https://chaingng.github.io/post/%E6%8A%95%E8%B3%87%E4%BF%A1%E8%A8%97%E3%81%AE%E8%A6%8B%E7%9B%B4%E3%81%97%E3%81%BE%E3%81%A8%E3%82%81/</link>
      <pubDate>Mon, 13 Jun 2016 18:19:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E6%8A%95%E8%B3%87%E4%BF%A1%E8%A8%97%E3%81%AE%E8%A6%8B%E7%9B%B4%E3%81%97%E3%81%BE%E3%81%A8%E3%82%81/</guid>
      <description>目的 いまの投資信託をよりリターン得られるように最適化する。 1.購入時手数料 投資信託の購入時にかかる手数料。 一般に対面である銀行はこれが高い。</description>
    </item>
    
    <item>
      <title>Windowsのプロキシ</title>
      <link>https://chaingng.github.io/post/windows%E3%81%AE%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7/</link>
      <pubDate>Fri, 31 Oct 2014 22:24:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/windows%E3%81%AE%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7/</guid>
      <description>Windowsのプロキシには２種類存在する。 １つめはInternetExplorerのプロキシサーバー設定、もう一つは主にWindows Up</description>
    </item>
    
    <item>
      <title>makeの種類</title>
      <link>https://chaingng.github.io/post/make%E3%81%AE%E7%A8%AE%E9%A1%9E/</link>
      <pubDate>Fri, 31 Oct 2014 19:16:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/make%E3%81%AE%E7%A8%AE%E9%A1%9E/</guid>
      <description>makeにはいくつかの種類がある。 ・GNU make &amp;nbsp;gmakeとかいわれる。 &amp;nbsp;UNIX系で標準的に使われるもので、Window</description>
    </item>
    
    <item>
      <title>サービスの自動起動</title>
      <link>https://chaingng.github.io/post/%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E8%87%AA%E5%8B%95%E8%B5%B7%E5%8B%95/</link>
      <pubDate>Thu, 30 Oct 2014 12:13:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E8%87%AA%E5%8B%95%E8%B5%B7%E5%8B%95/</guid>
      <description>chkconfigを使う。 ランレベル２～５での自動起動 chkconfig httpd on 起動レベルを指定（ランレベル３，５で起動） chkconfig httpd on --level 35 自動起動しているサービス一覧</description>
    </item>
    
    <item>
      <title>linuxで複数のファイルを結合</title>
      <link>https://chaingng.github.io/post/linux%E3%81%A7%E8%A4%87%E6%95%B0%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%B5%90%E5%90%88/</link>
      <pubDate>Wed, 29 Oct 2014 18:28:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/linux%E3%81%A7%E8%A4%87%E6%95%B0%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%B5%90%E5%90%88/</guid>
      <description>catコマンドを使う。 下記のコマンドで指定したディレクトリ以下の全てのファイルを結合し、 newfilename.txtにその結果を保存できる</description>
    </item>
    
    <item>
      <title>数学Aの順列（１）</title>
      <link>https://chaingng.github.io/post/%E6%95%B0%E5%AD%A6a%E3%81%AE%E9%A0%86%E5%88%97%EF%BC%91/</link>
      <pubDate>Sat, 18 Oct 2014 21:57:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E6%95%B0%E5%AD%A6a%E3%81%AE%E9%A0%86%E5%88%97%EF%BC%91/</guid>
      <description>プログラムで場合の数の問題がしばしば出てくるので 数学の順列の問題の解き方整理。 （１）ある場合の数からある条件を含まない場合を求めたいときは そ</description>
    </item>
    
    <item>
      <title>RISCとCISC</title>
      <link>https://chaingng.github.io/post/risc%E3%81%A8cisc/</link>
      <pubDate>Fri, 17 Oct 2014 23:28:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/risc%E3%81%A8cisc/</guid>
      <description>プロセッサを支える技術から、RISCとCISCについて整理。 RISC（Reduced Instruction Set Computer）は固定長の単純な命令を実行する方式</description>
    </item>
    
    <item>
      <title>wgetをプロキシ経由で利用</title>
      <link>https://chaingng.github.io/post/wget%E3%82%92%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7%E7%B5%8C%E7%94%B1%E3%81%A7%E5%88%A9%E7%94%A8/</link>
      <pubDate>Thu, 16 Oct 2014 20:10:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/wget%E3%82%92%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7%E7%B5%8C%E7%94%B1%E3%81%A7%E5%88%A9%E7%94%A8/</guid>
      <description>/etc/wgetrcに、以下の設定を追加してあげればよい。 use_proxy = on proxy_user = user proxy_password = passwordhttps_proxy = http://proxy.yoyodyne.com:18023/http_proxy = http://proxy.yoyodyne.com:18023/ftp_proxy = http://proxy.yoyodyne.com:18023/ ちなみに、ユーザ名とパスワードの設定はwgetrc</description>
    </item>
    
    <item>
      <title>cygwin&#43;mintty&#43;apt-cygのインストール</title>
      <link>https://chaingng.github.io/post/cygwinminttyapt-cyg%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</link>
      <pubDate>Wed, 15 Oct 2014 22:08:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/cygwinminttyapt-cyg%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</guid>
      <description>windowsでlinuxコマンド等を使うためのcygwin+minttyのインストールメモ。 Cygwinのインストールまで Cygwinのイ</description>
    </item>
    
    <item>
      <title>androidのコードリーディング</title>
      <link>https://chaingng.github.io/post/android%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%83%AA%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0/</link>
      <pubDate>Tue, 14 Oct 2014 21:31:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/android%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%83%AA%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0/</guid>
      <description>業務でandroidのソースコードを読まなければならなかったときに学んだ、 効率的なソースコードの読み方のメモ。 動的な解析と静的な解析 ソースコ</description>
    </item>
    
    <item>
      <title>ボタンを押すとテキストが変わるandroidアプリ</title>
      <link>https://chaingng.github.io/post/%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E6%8A%BC%E3%81%99%E3%81%A8%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%8C%E5%A4%89%E3%82%8F%E3%82%8Bandroid%E3%82%A2%E3%83%97%E3%83%AA/</link>
      <pubDate>Mon, 13 Oct 2014 22:16:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E6%8A%BC%E3%81%99%E3%81%A8%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%8C%E5%A4%89%E3%82%8F%E3%82%8Bandroid%E3%82%A2%E3%83%97%E3%83%AA/</guid>
      <description>ドットインストールで学んだ、ボタンを押すとテキストが変わるサンプルアプリの 作り方を整理。 http://dotinstall.com/lessons/basic_android 部品にIDをつける レイアウト画面から、ボタンをドラ</description>
    </item>
    
    <item>
      <title>androidにおけるaction／Activity／レイアウト</title>
      <link>https://chaingng.github.io/post/android%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bactionactivity%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88/</link>
      <pubDate>Sun, 12 Oct 2014 21:45:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/android%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bactionactivity%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88/</guid>
      <description>ドットインストールで学んだ、androidアプリの基礎を整理。 http://dotinstall.com/lessons/basic_android AndroidManifest.xml app&amp;gt;src&amp;gt;mainの下にあるファイル。 activityタ</description>
    </item>
    
    <item>
      <title>短縮URLの仕組み</title>
      <link>https://chaingng.github.io/post/%E7%9F%AD%E7%B8%AEurl%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF/</link>
      <pubDate>Fri, 10 Oct 2014 22:21:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E7%9F%AD%E7%B8%AEurl%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF/</guid>
      <description>整理用にメモ。 短縮URLでアクセスできる仕組みは、要はリダイレクトを利用しているだけ。 サンプルとして、こちらのページで短縮URLを作成してみ</description>
    </item>
    
    <item>
      <title>地上デジタル放送を録画したメディアと再生方法</title>
      <link>https://chaingng.github.io/post/%E5%9C%B0%E4%B8%8A%E3%83%87%E3%82%B8%E3%82%BF%E3%83%AB%E6%94%BE%E9%80%81%E3%82%92%E9%8C%B2%E7%94%BB%E3%81%97%E3%81%9F%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A2%E3%81%A8%E5%86%8D%E7%94%9F%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 09 Oct 2014 18:48:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E5%9C%B0%E4%B8%8A%E3%83%87%E3%82%B8%E3%82%BF%E3%83%AB%E6%94%BE%E9%80%81%E3%82%92%E9%8C%B2%E7%94%BB%E3%81%97%E3%81%9F%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A2%E3%81%A8%E5%86%8D%E7%94%9F%E6%96%B9%E6%B3%95/</guid>
      <description>DVD-VR 地上デジタル放送を家庭のDVDレコーダーで録画した時は「VRモード」となる。 これはDVD-VR(Video Recording Format)と呼ばれるDVD</description>
    </item>
    
    <item>
      <title>android studioのプロキシ設定</title>
      <link>https://chaingng.github.io/post/android-studio%E3%81%AE%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7%E8%A8%AD%E5%AE%9A/</link>
      <pubDate>Wed, 08 Oct 2014 20:44:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/android-studio%E3%81%AE%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7%E8%A8%AD%E5%AE%9A/</guid>
      <description>android studioのプロキシ設定のメモ。 HTTP Proxy File&amp;gt;Setting&amp;gt;HTTP Proxyから Manual Proxy Settingを選んで設定。 設定後、「Check Connection」ボタンで正</description>
    </item>
    
    <item>
      <title>GigabitEthernet規格の簡単なまとめ</title>
      <link>https://chaingng.github.io/post/gigabitethernet%E8%A6%8F%E6%A0%BC%E3%81%AE%E7%B0%A1%E5%8D%98%E3%81%AA%E3%81%BE%E3%81%A8%E3%82%81/</link>
      <pubDate>Tue, 07 Oct 2014 21:42:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/gigabitethernet%E8%A6%8F%E6%A0%BC%E3%81%AE%E7%B0%A1%E5%8D%98%E3%81%AA%E3%81%BE%E3%81%A8%E3%82%81/</guid>
      <description>GigabitEthernet規格の簡単なまとめ。 GigabitEthernet系の規格 GigabitEthernet系の規格はIEEE80</description>
    </item>
    
    <item>
      <title>android studioのインストール</title>
      <link>https://chaingng.github.io/post/android-studio%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</link>
      <pubDate>Mon, 06 Oct 2014 19:47:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/android-studio%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</guid>
      <description>android studioのインストールメモ。 まずはここから本体をダウンロード。 https://developer.android.com/sdk/installing/studio.html 後はこちらのページの内容に沿ってインストール。 https://developer.android.com/sdk/installing/index.html?pkg=studio まずはandroid s</description>
    </item>
    
    <item>
      <title>yumをローカルで使う場合のレポジトリ設定</title>
      <link>https://chaingng.github.io/post/yum%E3%82%92%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E4%BD%BF%E3%81%86%E5%A0%B4%E5%90%88%E3%81%AE%E3%83%AC%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E8%A8%AD%E5%AE%9A/</link>
      <pubDate>Sun, 05 Oct 2014 22:10:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/yum%E3%82%92%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E4%BD%BF%E3%81%86%E5%A0%B4%E5%90%88%E3%81%AE%E3%83%AC%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E8%A8%AD%E5%AE%9A/</guid>
      <description>最初にCDをマウントして、ローカルにデータをコピー。 mkdir -p /mnt/cdrom mount /dev/cdrom /mnt/cdrom mkdir /opt/redhat cp -rp /mnt/cdrom/* /opt/redhat/ umount /mnt/cdrom 次に、必要なrpmパッケージをインストール。 rpm -ivh /opt/redhat/Packages/*.rpm レポジトリ</description>
    </item>
    
    <item>
      <title>JDKのインストール</title>
      <link>https://chaingng.github.io/post/jdk%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</link>
      <pubDate>Sat, 04 Oct 2014 20:51:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/jdk%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</guid>
      <description>こちらのページから対応するOSのJDKをインストール。 http://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html あとは、JAVAHOMEのパスを設定するだけ。</description>
    </item>
    
    <item>
      <title>gitのインストール</title>
      <link>https://chaingng.github.io/post/git%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</link>
      <pubDate>Fri, 03 Oct 2014 21:20:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/git%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</guid>
      <description>gitのインストールメモ。 GIT EXTENTIONがCUIもGUIも同時にインストールできるのでスグレモノ。 以下のURLのDownloadからm</description>
    </item>
    
    <item>
      <title>yumをローカルで使用する場合のエイリアス</title>
      <link>https://chaingng.github.io/post/yum%E3%82%92%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E3%82%A8%E3%82%A4%E3%83%AA%E3%82%A2%E3%82%B9/</link>
      <pubDate>Thu, 02 Oct 2014 18:51:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/yum%E3%82%92%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E3%82%A8%E3%82%A4%E3%83%AA%E3%82%A2%E3%82%B9/</guid>
      <description>yumをインターネット経由ではなくローカルで使用したい場合のエイリアス設定。 /etc/bashrcもしくは~/.bashrcについて、以下を</description>
    </item>
    
    <item>
      <title>adbをWi-Fi経由で利用</title>
      <link>https://chaingng.github.io/post/adb%E3%82%92wi-fi%E7%B5%8C%E7%94%B1%E3%81%A7%E5%88%A9%E7%94%A8/</link>
      <pubDate>Wed, 01 Oct 2014 19:20:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/adb%E3%82%92wi-fi%E7%B5%8C%E7%94%B1%E3%81%A7%E5%88%A9%E7%94%A8/</guid>
      <description>端末が増えてくるとそれぞれusb接続してadbコマンドを打つと大変になった。 そこで、usbに接続しなくとも無線LAN経由にてadbを利用する</description>
    </item>
    
    <item>
      <title>LinuxでCPUやメモリ使用状況のログを取る方法</title>
      <link>https://chaingng.github.io/post/linux%E3%81%A7cpu%E3%82%84%E3%83%A1%E3%83%A2%E3%83%AA%E4%BD%BF%E7%94%A8%E7%8A%B6%E6%B3%81%E3%81%AE%E3%83%AD%E3%82%B0%E3%82%92%E5%8F%96%E3%82%8B%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 12 Mar 2014 19:55:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/linux%E3%81%A7cpu%E3%82%84%E3%83%A1%E3%83%A2%E3%83%AA%E4%BD%BF%E7%94%A8%E7%8A%B6%E6%B3%81%E3%81%AE%E3%83%AD%E3%82%B0%E3%82%92%E5%8F%96%E3%82%8B%E6%96%B9%E6%B3%95/</guid>
      <description>Linux(使っているのはRedhat Enterprise Linux 6.3)でCPU負荷とメモリ使用状況のログを取る必要があったので使い方をメモ。 ①CPU使用率とメモ</description>
    </item>
    
    <item>
      <title>ブートローダー</title>
      <link>https://chaingng.github.io/post/%E3%83%96%E3%83%BC%E3%83%88%E3%83%AD%E3%83%BC%E3%83%80%E3%83%BC/</link>
      <pubDate>Sun, 09 Feb 2014 18:34:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E3%83%96%E3%83%BC%E3%83%88%E3%83%AD%E3%83%BC%E3%83%80%E3%83%BC/</guid>
      <description>最近Androidのrootを取るのにbootloaderのアンロックを行ったのでメモ。 BootLoaderとは 起動直後のコンピュータはハー</description>
    </item>
    
    <item>
      <title>BeautifulSoupの第一歩</title>
      <link>https://chaingng.github.io/post/beautifulsoup%E3%81%AE%E7%AC%AC%E4%B8%80%E6%AD%A9/</link>
      <pubDate>Fri, 31 Jan 2014 23:22:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/beautifulsoup%E3%81%AE%E7%AC%AC%E4%B8%80%E6%AD%A9/</guid>
      <description>クローラーで取ってきたHTMLを解析するのにBeautifulSoupが使いやすそうだったので使ってみました。以下は簡単な使い方のメモ。 バー</description>
    </item>
    
    <item>
      <title>Linuxのクロック</title>
      <link>https://chaingng.github.io/post/linux%E3%81%AE%E3%82%AF%E3%83%AD%E3%83%83%E3%82%AF/</link>
      <pubDate>Sun, 26 Jan 2014 19:37:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/linux%E3%81%AE%E3%82%AF%E3%83%AD%E3%83%83%E3%82%AF/</guid>
      <description>ハードウェアクロックとシステムクロック Linuxには「ハードウェアクロック」と「システムクロックの」２つが存在します。 「システムクロック」が</description>
    </item>
    
    <item>
      <title>Pythonでモジュールインポート時の注意</title>
      <link>https://chaingng.github.io/post/python%E3%81%A7%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88%E6%99%82%E3%81%AE%E6%B3%A8%E6%84%8F/</link>
      <pubDate>Sun, 26 Jan 2014 16:22:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/python%E3%81%A7%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88%E6%99%82%E3%81%AE%E6%B3%A8%E6%84%8F/</guid>
      <description>クローラーを作るのにPythonが使いやすかったので利用したのですが、 そのときにimportでひっかかってしまったのでメモ。 importの書</description>
    </item>
    
    <item>
      <title>俺のフレンチ</title>
      <link>https://chaingng.github.io/post/%E4%BF%BA%E3%81%AE%E3%83%95%E3%83%AC%E3%83%B3%E3%83%81/</link>
      <pubDate>Sat, 02 Nov 2013 10:48:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E4%BF%BA%E3%81%AE%E3%83%95%E3%83%AC%E3%83%B3%E3%83%81/</guid>
      <description>用事があって表参道に行ったところ、通りがかりに俺のフレンチがあったので行ってきました。 俺のフレンチの中でも一番大きい店舗らしく、すぐに入るこ</description>
    </item>
    
    <item>
      <title>怒らないこと</title>
      <link>https://chaingng.github.io/post/%E6%80%92%E3%82%89%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8/</link>
      <pubDate>Mon, 01 Jul 2013 20:13:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E6%80%92%E3%82%89%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8/</guid>
      <description>日々暮らしていると時々えっ！となるようなことがありますが、 そういうときでも怒らないことって大事だと思います。 怒ることで自分の感情はすっきりす</description>
    </item>
    
    <item>
      <title>パリの危なさ</title>
      <link>https://chaingng.github.io/post/%E3%83%91%E3%83%AA%E3%81%AE%E5%8D%B1%E3%81%AA%E3%81%95/</link>
      <pubDate>Thu, 27 Jun 2013 21:11:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E3%83%91%E3%83%AA%E3%81%AE%E5%8D%B1%E3%81%AA%E3%81%95/</guid>
      <description>いままで海外はアジア地域でタイ、カンボジア、インド、 ヨーロッパ地域では安全と言われるフィンランド、スイスからドイツ、治安が悪いと言われるスペ</description>
    </item>
    
    <item>
      <title>くどいほどの自問自答</title>
      <link>https://chaingng.github.io/post/%E3%81%8F%E3%81%A9%E3%81%84%E3%81%BB%E3%81%A9%E3%81%AE%E8%87%AA%E5%95%8F%E8%87%AA%E7%AD%94/</link>
      <pubDate>Wed, 26 Jun 2013 19:40:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E3%81%8F%E3%81%A9%E3%81%84%E3%81%BB%E3%81%A9%E3%81%AE%E8%87%AA%E5%95%8F%E8%87%AA%E7%AD%94/</guid>
      <description>前の記事でミスや想定外の事態に備えるためには 最悪の事態を想定する、と書きましたが、 ブルガリア戦に負けた際に本田圭佑選手が開いた記者会見にヒン</description>
    </item>
    
    <item>
      <title>海外出張２日目</title>
      <link>https://chaingng.github.io/post/%E6%B5%B7%E5%A4%96%E5%87%BA%E5%BC%B5%EF%BC%92%E6%97%A5%E7%9B%AE/</link>
      <pubDate>Thu, 20 Jun 2013 14:45:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E6%B5%B7%E5%A4%96%E5%87%BA%E5%BC%B5%EF%BC%92%E6%97%A5%E7%9B%AE/</guid>
      <description>今日から打ち合わせが始まりました。 今日の話はこうしておけばという反省から学ぶことをまとめます。 １つ学んだのは、念には念を入れておく、というこ</description>
    </item>
    
    <item>
      <title>海外出張１日目</title>
      <link>https://chaingng.github.io/post/%E6%B5%B7%E5%A4%96%E5%87%BA%E5%BC%B5%EF%BC%91%E6%97%A5%E7%9B%AE/</link>
      <pubDate>Thu, 20 Jun 2013 14:31:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E6%B5%B7%E5%A4%96%E5%87%BA%E5%BC%B5%EF%BC%91%E6%97%A5%E7%9B%AE/</guid>
      <description>研修では昨年一度海外へ行ったことはあるのですが、 純粋な業務では初めての海外出張です。 この時期のパリは夜が遅くても明るいので びっくりです。 １日</description>
    </item>
    
    <item>
      <title>１つの要素に着目した２つの配列のソート</title>
      <link>https://chaingng.github.io/post/%EF%BC%91%E3%81%A4%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%AB%E7%9D%80%E7%9B%AE%E3%81%97%E3%81%9F%EF%BC%92%E3%81%A4%E3%81%AE%E9%85%8D%E5%88%97%E3%81%AE%E3%82%BD%E3%83%BC%E3%83%88/</link>
      <pubDate>Sun, 16 Jun 2013 23:08:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%EF%BC%91%E3%81%A4%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%AB%E7%9D%80%E7%9B%AE%E3%81%97%E3%81%9F%EF%BC%92%E3%81%A4%E3%81%AE%E9%85%8D%E5%88%97%E3%81%AE%E3%82%BD%E3%83%BC%E3%83%88/</guid>
      <description>c++での方法ですが、 ２つの配列の各要素が関係しているとき、 ひとつの配列の要素順に両方をソートする方法です。 まずはペア型のコンテナを宣言。 vector</description>
    </item>
    
    <item>
      <title>二分探索</title>
      <link>https://chaingng.github.io/post/%E4%BA%8C%E5%88%86%E6%8E%A2%E7%B4%A2/</link>
      <pubDate>Fri, 07 Jun 2013 09:20:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E4%BA%8C%E5%88%86%E6%8E%A2%E7%B4%A2/</guid>
      <description>二分探索について考えたいと思います。 ■適用できそうな問題 ・最長・最短というキーワードがあること。 ・Ｃ（ｘ)を満たすという条件があること。 ・全</description>
    </item>
    
    <item>
      <title>自分に原因があると考える</title>
      <link>https://chaingng.github.io/post/%E8%87%AA%E5%88%86%E3%81%AB%E5%8E%9F%E5%9B%A0%E3%81%8C%E3%81%82%E3%82%8B%E3%81%A8%E8%80%83%E3%81%88%E3%82%8B/</link>
      <pubDate>Mon, 03 Jun 2013 21:20:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E8%87%AA%E5%88%86%E3%81%AB%E5%8E%9F%E5%9B%A0%E3%81%8C%E3%81%82%E3%82%8B%E3%81%A8%E8%80%83%E3%81%88%E3%82%8B/</guid>
      <description>以前本でも読んだことがあった気がするのですが、 ある程度歳を重ねると、年齢の下の人が相対的に多くなることと、 合わせて色々な経験も重ねていること</description>
    </item>
    
    <item>
      <title>Topcoder 解いた問題のまとめ</title>
      <link>https://chaingng.github.io/post/topcoder-%E8%A7%A3%E3%81%84%E3%81%9F%E5%95%8F%E9%A1%8C%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81/</link>
      <pubDate>Wed, 15 May 2013 19:57:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/topcoder-%E8%A7%A3%E3%81%84%E3%81%9F%E5%95%8F%E9%A1%8C%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81/</guid>
      <description>Div2
SRM574 250points&amp;nbsp;500points
SRM575 250points&amp;nbsp;500points
SRM576 250points&amp;nbsp;500points
SRM577 250points 500points
SRM578 250points&amp;nbsp;500points
SRM579 250points&amp;nbsp;550points
 </description>
    </item>
    
    <item>
      <title>一瞬一瞬を楽しむ</title>
      <link>https://chaingng.github.io/post/%E4%B8%80%E7%9E%AC%E4%B8%80%E7%9E%AC%E3%82%92%E6%A5%BD%E3%81%97%E3%82%80/</link>
      <pubDate>Sat, 27 Apr 2013 23:54:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E4%B8%80%E7%9E%AC%E4%B8%80%E7%9E%AC%E3%82%92%E6%A5%BD%E3%81%97%E3%82%80/</guid>
      <description>今日は家さがしでいろいろな不動産屋をまわって 内見したりしてきました。 相手と要望が違うので簡単に決まらなかったり いろいろ考えるのも頭を使って疲</description>
    </item>
    
    <item>
      <title>電子書籍の活用</title>
      <link>https://chaingng.github.io/post/%E9%9B%BB%E5%AD%90%E6%9B%B8%E7%B1%8D%E3%81%AE%E6%B4%BB%E7%94%A8/</link>
      <pubDate>Thu, 25 Apr 2013 23:30:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E9%9B%BB%E5%AD%90%E6%9B%B8%E7%B1%8D%E3%81%AE%E6%B4%BB%E7%94%A8/</guid>
      <description>WEB+DBとSoftware Designの総集編がPDFでまとまっていると聞いて、 欲しくなってしまいました。 WEB+DB PRESS 総集編 [Vol.1～60]</description>
    </item>
    
    <item>
      <title>違うことを細切れに</title>
      <link>https://chaingng.github.io/post/%E9%81%95%E3%81%86%E3%81%93%E3%81%A8%E3%82%92%E7%B4%B0%E5%88%87%E3%82%8C%E3%81%AB/</link>
      <pubDate>Wed, 24 Apr 2013 23:22:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E9%81%95%E3%81%86%E3%81%93%E3%81%A8%E3%82%92%E7%B4%B0%E5%88%87%E3%82%8C%E3%81%AB/</guid>
      <description>仕事でずっと同じことを続けてやっていたのですが、 途中で集中力が途切れるのを感じました。 こういうときは、違う仕事を細切れにやった方がいいと聞い</description>
    </item>
    
    <item>
      <title>情報収集のコツ</title>
      <link>https://chaingng.github.io/post/%E6%83%85%E5%A0%B1%E5%8F%8E%E9%9B%86%E3%81%AE%E3%82%B3%E3%83%84/</link>
      <pubDate>Tue, 23 Apr 2013 21:39:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E6%83%85%E5%A0%B1%E5%8F%8E%E9%9B%86%E3%81%AE%E3%82%B3%E3%83%84/</guid>
      <description>仕事上いろいろなセミナーの講演資料や、仕様書を読む機会が多いのですが いつも漫然と流し読みしてしまいがちです。 そこで情報収集をうまく自分のもの</description>
    </item>
    
    <item>
      <title>「challenge」には「change」が含まれる</title>
      <link>https://chaingng.github.io/post/challenge%E3%81%AB%E3%81%AFchange%E3%81%8C%E5%90%AB%E3%81%BE%E3%82%8C%E3%82%8B/</link>
      <pubDate>Mon, 22 Apr 2013 22:33:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/challenge%E3%81%AB%E3%81%AFchange%E3%81%8C%E5%90%AB%E3%81%BE%E3%82%8C%E3%82%8B/</guid>
      <description>今日は仕事の中で いままでリーダーがやっていた仕事をやってみる？という機会がありました。 できあがったものはもちろん完璧なものではなく、修正が必</description>
    </item>
    
    <item>
      <title>hulu</title>
      <link>https://chaingng.github.io/post/hulu/</link>
      <pubDate>Sun, 21 Apr 2013 20:21:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/hulu/</guid>
      <description>映画での英語の勉強ですが、 ＴＳＵＴＡＹＡに毎回借りに行くのも手間がかかるので、 huluというＶＯＤサイトを試してみることに。 日本語版はライン</description>
    </item>
    
    <item>
      <title>英語の学習方法</title>
      <link>https://chaingng.github.io/post/%E8%8B%B1%E8%AA%9E%E3%81%AE%E5%AD%A6%E7%BF%92%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 20 Apr 2013 21:01:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/%E8%8B%B1%E8%AA%9E%E3%81%AE%E5%AD%A6%E7%BF%92%E6%96%B9%E6%B3%95/</guid>
      <description>英語の学習方法について自分の経験からまとめてみます。 最初はＴＯＥＩＣで９９０点を目指して頑張りました。 始めた当初はは５００点ほどでしたが、２</description>
    </item>
    
    <item>
      <title>High Sierra以降のmacはftpとtelnetが使えない。使うには、inetutilsをインストールする。</title>
      <link>https://chaingng.github.io/post/mac_ftp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chaingng.github.io/post/mac_ftp/</guid>
      <description>こちらの公式Q&amp;amp;Aにあるとおり、 High Sierra以降のmacではセキュリティを担保するために、ftpとtelnetがデフォルトで使えな</description>
    </item>
    
  </channel>
</rss>